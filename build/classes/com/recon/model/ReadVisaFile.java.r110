package com.recon.model;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.web.multipart.MultipartFile;

import com.recon.util.OracleConn;
import com.recon.util.ReadCashNetFile;


public class ReadVisaFile {

	private static final Logger logger = Logger.getLogger(ReadVisaFile.class);
	
	public static void readFile(String stFilePath,Connection conn)
	{
		logger.info("***** ReadVisaFile.readFile Start ****");
		
		String newTargetFile = "INCTF_VISA_280917.txt";
		ArrayList<String> Amount_translation = new ArrayList<>();
		//String newTargetFile = "123.txt";
		String stTable_Name = "";
		try
		{
			//CHECK WHETHER TABLE IS ALREADY PRESENT 
			String CHECK_TABLE = "SELECT count (*) FROM tab WHERE tname  = 'VISA_INPUT_FILE'";
			logger.info("CHECK_TABLE=="+CHECK_TABLE);
			PreparedStatement pstmt1 = conn.prepareStatement(CHECK_TABLE);
			ResultSet rset1 = pstmt1.executeQuery();
			int isPresent = 0;
			
			if(rset1.next())
			{
				//logger.info("table is present ? "+rset1.getInt(1));
				isPresent = rset1.getInt(1);
			}
			logger.info("isPresent=="+isPresent);
			if(isPresent == 0)
			{

				//IF NOT THEN CREATE IT
				//CREATE VISA INPUT TABLE
				String CREATE_QUERY = "CREATE TABLE VISA_INPUT_FILE (TC VARCHAR2(100 BYTE), TCR_CODE VARCHAR2(100 BYTE)," +
						" STRING VARCHAR2(100 BYTE), DCRS_SEQ_NO VARCHAR2(100 BYTE), FILEDATE DATE)";
				
				logger.info("CREATE_QUERY=="+CREATE_QUERY);
				PreparedStatement pstmt = conn.prepareStatement(CREATE_QUERY);
				pstmt.executeQuery();

			}
			
			//CREATE RAW TABLE FOR VISA
				//GET TABLE NAME FROM MAIN FILESOURCES
			String GET_RAW_TABLE = "SELECT TABLENAME FROM MAIN_FILESOURCE WHERE FILENAME = 'VISA' AND FILE_CATEGORY = 'VISA' AND FILE_SUBCATEGORY = 'ISSUER'";
			logger.info("GET_RAW_TABLE=="+GET_RAW_TABLE);
			pstmt1 = conn.prepareStatement(GET_RAW_TABLE);
			rset1 = pstmt1.executeQuery();
			
			if(rset1.next())
			{
				//logger.info("TABLE NAME IS "+rset1.getString("TABLENAME"));
				stTable_Name = rset1.getString("TABLENAME");
			}
			
			
			TCRFile tcrFileObj = new TCRFile();
			
			File file = new File(stFilePath+newTargetFile);
			FileReader fr = new FileReader(file);
			BufferedReader br = new BufferedReader(fr);
			String stline=br.readLine();
			
		//	String stline = "05004587772840129982000Z  74332747270726991827448000000000926000000300120356000000300120356MAKEMYTRIP INDIA PVT LTD NEW DELHI    IN 472200000     1008N1251101 4 0172710";
			
/*			Data_Elements.add("Account Number|5|20");
			Data_Elements.add("Transaction Code Qualifier|3");
*/			
			
			String DATA_INSERT = "INSERT INTO "+stTable_Name +" (TC,TCR_CODE,CARD_NUMBER,SOURCE_AMOUNT,AUTHORIZATION_CODE,DCRS_SEQ_NO," +
					"FILEDATE,PART_ID) " +
			" VALUES(?,?,?,?,?,?,TO_DATE(?,'DD/MM/YYYY'),?)";
			logger.info("DATA_INSERT=="+DATA_INSERT);
			PreparedStatement read_stmt =conn.prepareStatement(DATA_INSERT);
			
			String INSERT_33 = "INSERT INTO "+stTable_Name + " (TC,TCR_CODE,CARD_NUMBER,SOURCE_AMOUNT,TRACE,REFERENCE_NUMBER,RESPONSE_CODE,DCRS_SEQ_NO,FILEDATE,PART_ID)" +
					" VALUES(?,?,?,?,?,?,?,?,TO_DATE(?,'DD/MM/YYYY'),?)";
			logger.info("INSERT_33=="+INSERT_33);
			PreparedStatement pstmt33 = conn.prepareStatement(INSERT_33);
			
				
			int count = 0;
			int batch = 1;
			float amt = 0.00f;
			String INSERT_QUERY = "INSERT INTO VISA_INPUT_FILE (TC, TCR_CODE, STRING,DCRS_SEQ_NO,FILEDATE) VALUES(?,?,?,?,TO_DATE(?,'DD/MM/YYYY'))";
			String Seq_num = "select 'VISA'||visa_seq.nextval AS SEQ from dual";
			PreparedStatement pstmt2 = conn.prepareStatement(Seq_num);
			String seq = "";
			logger.info("INSERT_QUERY=="+INSERT_QUERY);
			logger.info("Seq_num=="+Seq_num);
			//GETTING ALL CHARACTER , DIGIT AND SIGN FROM TABLE
			String SIGN_QUERY = "SELECT * FROM VISA_CHAR_TRANSLATION";
			logger.info("SIGN_QUERY=="+SIGN_QUERY);
			PreparedStatement sign_pstmt = conn.prepareStatement(SIGN_QUERY);
			ResultSet sign_rset = sign_pstmt.executeQuery();
			
			while(sign_rset.next())
			{
				String Data = sign_rset.getString("CHARACTER")+"|"+sign_rset.getInt("LAST_DIGIT")+"|"+sign_rset.getString("SIGN");
			//	logger.info("check here "+Data);
				Amount_translation.add(Data);
				logger.info("Data=="+Data);
				
			}
			
			pstmt1 = conn.prepareStatement(INSERT_QUERY);
			while(stline != null)
			{
				
				//logger.info("count is "+count);
				String check_TCR = "";
				String ACC_NO = "";
				String SOURCE_AMT = "";
				String AUTH_CODE = "";
				String TRACE = "";
				String RESPONSE_CODE = "";
				String REFERENCE_NUMBER = "";
				String CARD_NUMBER = "";
				//String TRAN_AMOUNT = "";
				
				List<String> Data_Elements = new ArrayList<>();
				String TC = stline.substring(0, 2);
				String TCR_Code = stline.substring(2,4);
				
				//generating SEQ number
				
				
				
				//INSERT THE DATA IN INPUT TABLE
				
				if(TC.equals("05") || TC.equals("06") || TC.equals("07")|| TC.equals("25") || TC.equals("27"))
				{
					if(TCR_Code.equals("00"))
					{
						Data_Elements = tcrFileObj.TCR050Format();
					}
				}
				else if(TC.equals("10"))
				{
					if(TCR_Code.equals("00"))
					{
						Data_Elements = tcrFileObj.TCR10FeeCollectionFormat();
					}
				}
				else if(TC.equals("20"))
				{
					if(TCR_Code.equals("00"))
					{
						Data_Elements = tcrFileObj.TCR20FundDisbursement();
					}
				}
				else if(TC.equals("33"))//VISA ACQUIRER TRANSACTIONS
				{
					//REMOVE THE HEADER FROM THIS STRING AND THEN STRING
					String stLine = stline.substring(34 , stline.length());
					//logger.info("NOW STRING IS "+stLine);
					check_TCR = stLine.substring(3, 6);
					//logger.info("check TCR "+check_TCR);
					if(check_TCR.equals("200"))
					{
						Data_Elements = tcrFileObj.V22200();
					}
					
				}
				
				//READ CARD NUMBER , AMOUNT , AND AUTH CODE FROM INPUT STRING AND INSERT IT IN NEW RAW TABLE
				for(int i= 0 ;i<Data_Elements.size(); i++)
				{
					if((TC.equals("05")||TC.equals("06")||TC.equals("07")||TC.equals("25")||TC.equals("27")||TC.equals("10")||TC.equals("20")))
					{
						if(TCR_Code.equals("00"))
						{
							String[] DE =  Data_Elements.get(i).split("\\|");

							//if(((DE[0].trim()).equals("Account Number")) || ((DE[0].trim()).equals("Source Amount"))|| ((DE[0].trim()).equals("Authorization Code")));
							if(DE[0].trim().equalsIgnoreCase("ACCOUNT NUMBER") ||
									DE[0].trim().equalsIgnoreCase("SOURCE AMOUNT") ||
									DE[0].trim().equalsIgnoreCase("Authorization Code"))
							{
								//logger.info("DE[0] "+DE[0]);
								//	logger.info("DE LENGTH IS "+DE.length);
								if(DE.length == 3)
								{
									int ststart_Pos = Integer.parseInt(DE[1].trim());
									int stEnd_pos = Integer.parseInt(DE[2].trim());
									/*logger.info("start positon "+ststart_Pos);
							logger.info("End Position "+stEnd_pos);
							logger.info("stHeader : "+DE[0]+" Value : "+stline.substring((ststart_Pos-1), stEnd_pos).replaceAll("^0*",""));*/

									if(DE[0].equalsIgnoreCase("ACCOUNT NUMBER"))
									{
										ACC_NO = stline.substring((ststart_Pos-1), stEnd_pos).replaceAll("^0*","").trim();
									}
									else if(DE[0].equalsIgnoreCase("SOURCE AMOUNT")) {

										SOURCE_AMT = stline.substring((ststart_Pos-1), stEnd_pos).replaceAll("^0*","").trim();
										amt = (Float.parseFloat(SOURCE_AMT)/100);
										//logger.info("AMT IS "+SOURCE_AMT+" check this "+amt);
									}
									else if(DE[0].equalsIgnoreCase("AUTHORIZATION CODE"))
									{
										//AUTH_CODE = stline.substring((ststart_Pos-1), stEnd_pos).replaceAll("^0*","").trim();
										AUTH_CODE = stline.substring((ststart_Pos-1), stEnd_pos).trim();
									}



								}
								else if(DE.length == 2)
								{
									int ststart_pos =  Integer.parseInt(DE[1].trim());
									if(DE[0].equalsIgnoreCase("ACCOUNT NUMBER"))
									{
										ACC_NO = stline.substring((ststart_pos-1), (ststart_pos)).replaceAll("^0*","").trim();
									}
									else if(DE[0].equalsIgnoreCase("SOURCE AMOUNT")) {

										SOURCE_AMT = stline.substring((ststart_pos-1), (ststart_pos)).replaceAll("^0*","").trim();
										amt = (Float.parseFloat(SOURCE_AMT)/100);
									}
									else if(DE[0].equalsIgnoreCase("AUTHORIZATION CODE"))
									{
										//AUTH_CODE = stline.substring((ststart_pos-1), (ststart_pos)).replaceAll("^0*","").trim();
										AUTH_CODE = stline.substring((ststart_pos-1), (ststart_pos)).trim();
									}

								}
							}
						}
					}
					else if(TC.equals("33"))
					{
						String stLine = stline.substring(34 , stline.length());
						if(check_TCR.equals("200"))
						{
							//GET VARIABLES FOR DECIMAL AND SIGN
							String sign = "";
							String last_Digit = "";
							String[] DE =  Data_Elements.get(i).split("\\|");

							if(DE[0].equalsIgnoreCase("Trace Number")||
									DE[0].equalsIgnoreCase("Response Code")	||
									DE[0].equalsIgnoreCase("Retrieval Reference Number")||
									DE[0].equalsIgnoreCase("Card Number")||
									DE[0].equalsIgnoreCase("Transaction Amount"))
							{
								if(DE.length == 3)
								{
									int ststart_Pos = Integer.parseInt(DE[1].trim());
									int stEnd_pos = Integer.parseInt(DE[2].trim());
									/*logger.info("start positon "+ststart_Pos);
							logger.info("End Position "+stEnd_pos);
							logger.info("stHeader : "+DE[0]+" Value : "+stline.substring((ststart_Pos-1), stEnd_pos).replaceAll("^0*",""));*/

									if(DE[0].equalsIgnoreCase("Trace Number"))
									{
										//TRACE = stLine.substring((ststart_Pos-1), stEnd_pos).replaceAll("^0*","").trim();
										TRACE = stLine.substring((ststart_Pos-1), stEnd_pos).trim();
									}
									else if(DE[0].equalsIgnoreCase("Response Code")) 
									{
										RESPONSE_CODE = stLine.substring((ststart_Pos-1), stEnd_pos).trim();
										//logger.info("AMT IS "+SOURCE_AMT+" check this "+amt);
									}
									else if(DE[0].equalsIgnoreCase("Retrieval Reference Number"))
									{
										REFERENCE_NUMBER = stLine.substring((ststart_Pos-1), stEnd_pos).replaceAll("^0*","").trim();
									}
									else if(DE[0].equalsIgnoreCase("Card Number"))
									{
										CARD_NUMBER = stLine.substring((ststart_Pos-1), stEnd_pos).replaceAll("^0*","").trim();
									}
									else if(DE[0].equalsIgnoreCase("Transaction Amount"))
									{
										SOURCE_AMT = stLine.substring((ststart_Pos-1), (stEnd_pos)).replaceAll("^0*","").trim();
										//check for the list of variables provided by visa for decimal position
										for(int j =0; j< Amount_translation.size() ; j++ )
										{
											String[] data =  Amount_translation.get(j).split("\\|");
											if(SOURCE_AMT.contains(data[0]))
											{
												if(data[2].equals("-"))
												{
													SOURCE_AMT = data[2]+SOURCE_AMT.replace(data[0], data[1]);
												}
												else
												{
													SOURCE_AMT = SOURCE_AMT.replace(data[0], data[1]);
												}
											}
											
										}
										amt = (Float.parseFloat(SOURCE_AMT)/100);
										//logger.info("amt is "+amt);
									}



								}
								else if(DE.length == 2)
								{
									int ststart_Pos =  Integer.parseInt(DE[1].trim());
									if(DE[0].equalsIgnoreCase("Trace Number"))
									{
										//TRACE = stLine.substring((ststart_Pos-1), ststart_Pos).replaceAll("^0*","").trim();
										TRACE = stLine.substring((ststart_Pos-1), ststart_Pos).trim();
									}
									else if(DE[0].equalsIgnoreCase("Response Code")) {

										RESPONSE_CODE = stLine.substring((ststart_Pos-1), ststart_Pos).trim();
										//logger.info("AMT IS "+SOURCE_AMT+" check this "+amt);
									}
									else if(DE[0].equalsIgnoreCase("Retrieval Reference Number"))
									{
										REFERENCE_NUMBER = stLine.substring((ststart_Pos-1), ststart_Pos).replaceAll("^0*","").trim();
									}
									else if(DE[0].equalsIgnoreCase("Card Number"))
									{
										CARD_NUMBER = stLine.substring((ststart_Pos-1), ststart_Pos).replaceAll("^0*","").trim();
									}
									else if(DE[0].equalsIgnoreCase("Transaction Amount"))
									{
										SOURCE_AMT = stLine.substring((ststart_Pos-1), (ststart_Pos)).replaceAll("^0*","").trim();
										
										for(int j =0; j< Amount_translation.size() ; j++ )
										{
											String[] data =  Amount_translation.get(j).split("\\|");
											if(SOURCE_AMT.contains(data[0]))
											{
												if(data[2].equals("-"))
												{
													SOURCE_AMT = data[2]+SOURCE_AMT.replace(data[0], data[1]);
												}
												else
												{
													SOURCE_AMT = SOURCE_AMT.replace(data[0], data[1]);
												}
											}
											
										}
										
										amt = (Float.parseFloat(SOURCE_AMT)/100);
									}

								}
							}
						}
						
						
					}
			}
				/*logger.info("TRACE "+TRACE);
				logger.info("REF NO "+REFERENCE_NUMBER);
				logger.info("AMOUNT "+SOURCE_AMT);
				logger.info("CARD NUMB "+CARD_NUMBER);
				logger.info("RESP CODE "+RESPONSE_CODE);
				
				*/
				if((TC.equals("05")||TC.equals("06")||TC.equals("07")||TC.equals("25")||TC.equals("27")||TC.equals("10")||TC.equals("20")))
				{
					count++;
					if(TCR_Code.equals("00"))
					{
						ResultSet rset2 =pstmt2.executeQuery();
						if(rset2.next())
						{
							seq = rset2.getString("SEQ");
						}
					}
					
					//Insertint in input table first
					pstmt1.setString(1, TC);
					pstmt1.setString(2, TCR_Code);
					pstmt1.setString(3, stline);
					pstmt1.setString(4, seq+"");
					pstmt1.setString(5, "28/09/2017");

					pstmt1.addBatch();

					if(TCR_Code.equals("00"))
					{
						read_stmt.setString(1, TC);
						read_stmt.setString(2, TCR_Code);
						read_stmt.setString(3, ACC_NO);
						read_stmt.setString(4, amt+"");
						read_stmt.setString(5, AUTH_CODE);
						read_stmt.setString(6, seq+"");
						read_stmt.setString(7, "28/09/2017");
						read_stmt.setString(8, "1");
						

						read_stmt.addBatch();
					}

					if(count == 10000)
					{
						count = 1;
						read_stmt.executeBatch();
						pstmt1.executeBatch();
						logger.info("Exceuted batch "+batch);
						batch++;

					}
				}
				else if(TC.equals("33"))
				{
					count++;					
					if(check_TCR.equals("200"))
					{
						ResultSet rset2 =pstmt2.executeQuery();
						if(rset2.next())
						{
							seq = rset2.getString("SEQ");
						}
					}
					
					//Insertint in input table first
					pstmt1.setString(1, TC);
					pstmt1.setString(2, check_TCR);
					pstmt1.setString(3, stline);
					pstmt1.setString(4, seq+"");
					pstmt1.setString(5, "28/09/2017");

					pstmt1.addBatch();
					
					if(check_TCR.equals("200"))
					{

						pstmt33.setString(1, TC);
						pstmt33.setString(2, check_TCR);
						pstmt33.setString(3, CARD_NUMBER);
						pstmt33.setString(4, amt+"");
						pstmt33.setString(5, TRACE);
						pstmt33.setString(6, REFERENCE_NUMBER);
						pstmt33.setString(7, RESPONSE_CODE);
						pstmt33.setString(8, seq);
						pstmt33.setString(9, "28/09/2017");
						pstmt33.setString(10, "1");

						pstmt33.addBatch();
					}
					if(count == 10000)
					{
						count = 1;
						pstmt33.executeBatch();
						pstmt1.executeBatch();
						logger.info("Exceuted batch "+batch);
						batch++;

					}
					
					
					
				}
				
				stline = br.readLine();
			}
			read_stmt.executeBatch();
			pstmt1.executeBatch();
			pstmt33.executeBatch();
			
			logger.info("Completed Reading");
			
			logger.info("***** ReadVisaFile.readFile End ****");
			
		}
		catch(Exception e)
		{
			logger.error(" error in ReadVisaFile.readFile", new Exception("ReadVisaFile.readFile",e));
			
		}
	}
	

	
	
	

	public boolean readData(CompareSetupBean setupBean, Connection conn,
			MultipartFile file, FileSourceBean sourceBean) {
		logger.info("***** ReadVisaFile.readData Start ****");
		InputStream fis = null;
		String stTable_Name = "";
		ArrayList<String> Amount_translation = new ArrayList<String>();
		
		TCRFile tcrFileObj = new TCRFile();
		
	
		BufferedReader br = null ;
		String thisLine = null;  
		
		try
		{
			
			br = new BufferedReader(new InputStreamReader(file.getInputStream()));
		
			logger.info("Reading data "+new Date().toString());
			//CHECK WHETHER TABLE IS ALREADY PRESENT 
			String CHECK_TABLE="";
			if(setupBean.getStSubCategory().equals("-")){
				CHECK_TABLE = "SELECT count (*) FROM tab WHERE tname  = 'WCC_INPUT_FILE'";
			}else{
				CHECK_TABLE = "SELECT count (*) FROM tab WHERE tname  = 'VISA_INPUT_FILE'";
			}
			logger.info("CHECK_TABLE=="+CHECK_TABLE);
			PreparedStatement pstmt1 = conn.prepareStatement(CHECK_TABLE);
			ResultSet rset1 = pstmt1.executeQuery();
			int isPresent = 0;
			
			if(rset1.next())
			{
				//logger.info("table is present ? "+rset1.getInt(1));
				isPresent = rset1.getInt(1);
			}
			
			if(isPresent == 0)
			{

				//IF NOT THEN CREATE IT
				//CREATE VISA INPUT TABLE
				String CREATE_QUERY = "CREATE TABLE VISA_INPUT_FILE (TC VARCHAR2(100 BYTE), TCR_CODE VARCHAR2(100 BYTE)," +
						" STRING VARCHAR2(1000 BYTE), DCRS_SEQ_NO VARCHAR2(100 BYTE), FILEDATE DATE)";
			
				logger.info("CREATE_QUERY=="+CREATE_QUERY);
				PreparedStatement pstmt = conn.prepareStatement(CREATE_QUERY);
				pstmt.executeQuery();

			}
			
			//CREATE RAW TABLE FOR VISA
				//GET TABLE NAME FROM MAIN FILESOURCES
			String GET_RAW_TABLE = "";
			if(setupBean.getStSubCategory().equals("-")){
				GET_RAW_TABLE = "SELECT TABLENAME FROM MAIN_FILESOURCE WHERE FILENAME = 'VISA' AND FILE_CATEGORY = 'WCC' AND FILE_SUBCATEGORY = '-'";
			}else{
				GET_RAW_TABLE = "SELECT TABLENAME FROM MAIN_FILESOURCE WHERE FILENAME = 'VISA' AND FILE_CATEGORY = 'VISA' AND FILE_SUBCATEGORY = 'ACQUIRER'";
			}
			logger.info("GET_RAW_TABLE=="+GET_RAW_TABLE);
			pstmt1 = conn.prepareStatement(GET_RAW_TABLE);
			rset1 = pstmt1.executeQuery();
			
			if(rset1.next())
			{
				//logger.info("TABLE NAME IS "+rset1.getString("TABLENAME"));
				stTable_Name = rset1.getString("TABLENAME");
			}
			
			String stline=br.readLine();
			
			String DATA_INSERT_05 = "INSERT INTO "+stTable_Name +" (TC,TCR_CODE,DCRS_SEQ_NO,FILEDATE,PART_ID,CARD_NUMBER," +
					"Floor_Limit_indi,ARN,Acquirer_Busi_ID,Purchase_Date,Destination_Amount,Destination_Curr_Code,SOURCE_AMOUNT,Source_Curr_Code,Merchant_Name,Merchant_City," +
					"Merchant_Country_Code,Merchant_Category_Code,Merchant_ZIP_Code,Usage_Code,Reason_Code,Settlement_Flag,Auth_Chara_Ind,AUTHORIZATION_CODE," +
					"POS_Terminal_Capability,Cardholder_ID_Method," +
					"Collection_Only_Flag,POS_Entry_Mode,Central_Process_Date,Reimbursement_Attr) " +
			" VALUES(?,?,?,TO_DATE(?,'DD/MM/YYYY'),?," +
			"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
			
			logger.info("DATA_INSERT_05=="+DATA_INSERT_05);
			
			String DATA_INSERT_10 = "INSERT INTO "+stTable_Name +" (TC,TCR_CODE,DCRS_SEQ_NO,FILEDATE,PART_ID,Destination_BIN,Source_BIN,Reason_Code,Country_Code,Event_Date," +
					"CARD_NUMBER,Destination_Amount,Destination_Curr_Code,SOURCE_AMOUNT,Source_Curr_Code,Message_Text,Settlement_Flag,Transac_Identifier,Central_Process_Date,Reimbursement_Attr) " +
			" VALUES(?,?,?,TO_DATE(?,'DD/MM/YYYY'),?," +
			"?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
			
			logger.info("DATA_INSERT_10=="+DATA_INSERT_10);
			
			PreparedStatement read_stmt_05 =conn.prepareStatement(DATA_INSERT_05);
			
			PreparedStatement read_stmt_10 = conn.prepareStatement(DATA_INSERT_10);
			
			String INSERT_33 = "INSERT INTO "+stTable_Name + " (TC,TCR_CODE,CARD_NUMBER,SOURCE_AMOUNT,TRACE,REFERENCE_NUMBER,RESPONSE_CODE,DCRS_SEQ_NO,FILEDATE,PART_ID,REQ_MSGTYPE)" +
					" VALUES(?,?,?,?,?,?,?,?,TO_DATE(?,'DD/MM/YYYY'),?,?)";
			
			logger.info("INSERT_33=="+INSERT_33);
			PreparedStatement pstmt33 = conn.prepareStatement(INSERT_33);
			
			int count = 0;
			int batch = 1;
			float amt = 0.00f;
			String INSERT_QUERY="";
			if(setupBean.getStSubCategory().equals("-")){
				INSERT_QUERY = "INSERT INTO WCC_INPUT_FILE (TC, TCR_CODE, STRING,DCRS_SEQ_NO,FILEDATE) VALUES(?,?,?,?,TO_DATE(?,'DD/MM/YYYY'))";
			}else{
				INSERT_QUERY = "INSERT INTO VISA_INPUT_FILE (TC, TCR_CODE, STRING,DCRS_SEQ_NO,FILEDATE) VALUES(?,?,?,?,TO_DATE(?,'DD/MM/YYYY'))";
			}
			logger.info("INSERT_QUERY=="+INSERT_QUERY);
			pstmt1 = conn.prepareStatement(INSERT_QUERY);
			
			String Seq_num = "select 'VISA'||visa_seq.nextval AS SEQ from dual";
			PreparedStatement pstmt2 = conn.prepareStatement(Seq_num);
			String seq = "";
			
			//GETTING ALL CHARACTER , DIGIT AND SIGN FROM TABLE
			String SIGN_QUERY = "SELECT * FROM VISA_CHAR_TRANSLATION";
			PreparedStatement sign_pstmt = conn.prepareStatement(SIGN_QUERY);
			ResultSet sign_rset = sign_pstmt.executeQuery();
			
			while(sign_rset.next())
			{
				String Data = sign_rset.getString("CHARACTER")+"|"+sign_rset.getInt("LAST_DIGIT")+"|"+sign_rset.getString("SIGN");
				Amount_translation.add(Data);
			}
			List<String> stRawData = new ArrayList<String>(); 
				while(stline != null)
				{
					stRawData.clear();
					boolean containsVISATable = false;
					//logger.info("count is "+count);
					String check_TCR = "";
					String ACC_NO = "";
					String SOURCE_AMT = "";
					String AUTH_CODE = "";
					String TRACE = "";
					String RESPONSE_CODE = "";
					String REFERENCE_NUMBER = "";
					String CARD_NUMBER = "";
					String REQ_MSG_TYPE = "";
					//String TRAN_AMOUNT = "";
					
					List<String> Data_Elements = new ArrayList<String>();
					String TC = stline.substring(0, 2);
					String TCR_Code = stline.substring(2,4);
					
					//generating SEQ number
					
					
					
					//INSERT THE DATA IN INPUT TABLE
					
					if(TC.equals("05") || TC.equals("06") || TC.equals("07")|| TC.equals("25") || TC.equals("27"))
					{
						if(TCR_Code.equals("00"))
						{
							Data_Elements = tcrFileObj.TCR050Format();
						}
					}
					else if(TC.equals("10"))
					{
						if(TCR_Code.equals("00"))
						{
							Data_Elements = tcrFileObj.TCR10FeeCollectionFormat();
						}
					}
					else if(TC.equals("20"))
					{
						if(TCR_Code.equals("00"))
						{
							Data_Elements = tcrFileObj.TCR20FundDisbursement();
						}
					}
					else if(TC.equals("33"))//VISA ACQUIRER TRANSACTIONS
					{
						//REMOVE THE HEADER FROM THIS STRING AND THEN STRING
						String stLine = stline.substring(34 , stline.length());
						
						//ADDED BY INT5779 FOR VISA TABLE ISSUE
						
						if(stLine.contains("VISA TABLE"))
						{
							containsVISATable = true;
						}
						else{
							//logger.info("NOW STRING IS "+stLine);
							check_TCR = stLine.substring(3, 6);
							//logger.info("check TCR "+check_TCR);
							if(check_TCR.equals("200"))
							{
								Data_Elements = tcrFileObj.V22200();
							}
						}
					}
					if(!containsVISATable)
					{
						//READ CARD NUMBER , AMOUNT , AND AUTH CODE FROM INPUT STRING AND INSERT IT IN NEW RAW TABLE
						for(int i= 0 ;i<Data_Elements.size(); i++)
						{
							if(TC.equals("05")||TC.equals("06")||TC.equals("07")||TC.equals("25")||TC.equals("27"))
							{
								if(TCR_Code.equals("00"))
								{

									String[] DE =  Data_Elements.get(i).split("\\|");
									String stData = "";

									//if(((DE[0].trim()).equals("Account Number")) || ((DE[0].trim()).equals("Source Amount"))|| ((DE[0].trim()).equals("Authorization Code")));
									/*if(DE[0].trim().equalsIgnoreCase("ACCOUNT NUMBER") ||
										DE[0].trim().equalsIgnoreCase("SOURCE AMOUNT") ||
										DE[0].trim().equalsIgnoreCase("Authorization Code"))
								{*/
									//logger.info("DE[0] "+DE[0]);
									//	logger.info("DE LENGTH IS "+DE.length);
									if(DE.length == 3)
									{
										int ststart_Pos = Integer.parseInt(DE[1].trim());
										int stEnd_pos = Integer.parseInt(DE[2].trim());
										/*logger.info("start positon "+ststart_Pos);
								logger.info("End Position "+stEnd_pos);
								logger.info("stHeader : "+DE[0]+" Value : "+stline.substring((ststart_Pos-1), stEnd_pos).replaceAll("^0*",""));*/

										if(DE[0].equalsIgnoreCase("ACCOUNT NUMBER"))
										{
											//logger.info(DE[0]);
											stData = stline.substring((ststart_Pos-1), stEnd_pos).replaceAll("^0*","").trim();
											stRawData.add(stData);
										}
										else if(DE[0].equalsIgnoreCase("SOURCE AMOUNT") || DE[0].equalsIgnoreCase("DESTINATION AMOUNT")) {
											//logger.info(DE[0]);
											SOURCE_AMT = stline.substring((ststart_Pos-1), stEnd_pos).replaceAll("^0*","").trim();
											stData = String.valueOf((Float.parseFloat(SOURCE_AMT)/100));
											stRawData.add(stData);
											//logger.info("AMT IS "+SOURCE_AMT+" check this "+amt);
										}
										else //if(DE[0].equalsIgnoreCase("AUTHORIZATION CODE"))
											if(DE[0].equalsIgnoreCase("Floor Limit Indicator") ||
													DE[0].equalsIgnoreCase("Acquirer Reference Number") ||
													DE[0].equalsIgnoreCase("Acquirer's Business ID") ||
													DE[0].equalsIgnoreCase("Purchase Date") ||
													//DE[0].equalsIgnoreCase("Destination Amount") || 
													DE[0].equalsIgnoreCase("Destination Currency Code") ||
													DE[0].equalsIgnoreCase("Source Currency Code") ||
													DE[0].equalsIgnoreCase("Merchant Name") ||
													DE[0].equalsIgnoreCase("Merchant City") ||
													DE[0].equalsIgnoreCase("Merchant Country Code") ||
													DE[0].equalsIgnoreCase("Merchant Category Code") ||
													DE[0].equalsIgnoreCase("Merchant ZIP Code") ||
													DE[0].equalsIgnoreCase("Usage Code") ||
													DE[0].equalsIgnoreCase("Reason Code") ||
													DE[0].equalsIgnoreCase("Settlement Flag") ||
													DE[0].equalsIgnoreCase("Authorization Characteristics Indicator") ||
													DE[0].equalsIgnoreCase("POS Terminal Capability") ||
													DE[0].equalsIgnoreCase("Cardholder ID Method") ||
													DE[0].equalsIgnoreCase("Collection-Only Flag") ||
													DE[0].equalsIgnoreCase("POS Entry Mode") ||
													DE[0].equalsIgnoreCase("Central Processing Date") ||
													DE[0].equalsIgnoreCase("Reimbursement Attribute") ||
													DE[0].equalsIgnoreCase("Transaction Identifier")||
													DE[0].equalsIgnoreCase("AUTHORIZATION CODE"))


											{
												//logger.info(DE[0]);
												//AUTH_CODE = stline.substring((ststart_Pos-1), stEnd_pos).replaceAll("^0*","").trim();
												stData = stline.substring((ststart_Pos-1), stEnd_pos).trim();
												stRawData.add(stData);
												if(DE[0].equalsIgnoreCase("Collection-Only Flag"))
												{
													//logger.info("Collection-Only Flag "+stData);
												}
											}



									}
									else if(DE.length == 2)
									{
										int ststart_pos =  Integer.parseInt(DE[1].trim());
										if(DE[0].equalsIgnoreCase("ACCOUNT NUMBER"))
										{
											//logger.info(DE[0]);
											stData = stline.substring((ststart_pos-1), (ststart_pos)).replaceAll("^0*","").trim();
											stRawData.add(stData);
										}
										else if(DE[0].equalsIgnoreCase("SOURCE AMOUNT") || DE[0].equalsIgnoreCase("DESTINATION AMOUNT")) {
											try
											{
												//	logger.info(DE[0]);
												SOURCE_AMT = stline.substring((ststart_pos-1), (ststart_pos)).replaceAll("^0*","").trim();
												stData = String.valueOf((Float.parseFloat(SOURCE_AMT)/100));
												stRawData.add(stData);
											}
											catch(Exception e)
											{
												logger.info("Exception in visa issuer on line "+stline);
											}
										}
										else //if(DE[0].equalsIgnoreCase("AUTHORIZATION CODE"))
											if(DE[0].equalsIgnoreCase("Floor Limit Indicator") ||
													DE[0].equalsIgnoreCase("Acquirer Reference Number") ||
													DE[0].equalsIgnoreCase("Acquirer's Business ID") ||
													DE[0].equalsIgnoreCase("Purchase Date") ||
													//DE[0].equalsIgnoreCase("Destination Amount") || 
													DE[0].equalsIgnoreCase("Destination Currency Code") ||
													DE[0].equalsIgnoreCase("Source Currency Code") ||
													DE[0].equalsIgnoreCase("Merchant Name") ||
													DE[0].equalsIgnoreCase("Merchant City") ||
													DE[0].equalsIgnoreCase("Merchant Country Code") ||
													DE[0].equalsIgnoreCase("Merchant Category Code") ||
													DE[0].equalsIgnoreCase("Merchant ZIP Code") ||
													DE[0].equalsIgnoreCase("Usage Code") ||
													DE[0].equalsIgnoreCase("Reason Code") ||
													DE[0].equalsIgnoreCase("Settlement Flag") ||
													DE[0].equalsIgnoreCase("Authorization Characteristics Indicator") ||
													DE[0].equalsIgnoreCase("POS Terminal Capability") ||
													DE[0].equalsIgnoreCase("Cardholder ID Method") ||
													DE[0].equalsIgnoreCase("Collection-Only Flag") ||
													DE[0].equalsIgnoreCase("POS Entry Mode") ||
													DE[0].equalsIgnoreCase("Central Processing Date") ||
													DE[0].equalsIgnoreCase("Reimbursement Attribute") ||
													DE[0].equalsIgnoreCase("Transaction Identifier")||
													DE[0].equalsIgnoreCase("AUTHORIZATION CODE"))

											{
												//logger.info(DE[0]);
												//AUTH_CODE = stline.substring((ststart_pos-1), (ststart_pos)).replaceAll("^0*","").trim();
												stData = stline.substring((ststart_pos-1), (ststart_pos)).trim();
												stRawData.add(stData);
												if(DE[0].equalsIgnoreCase("Collection-Only Flag"))
												{
													//logger.info("Collection-Only Flag "+stData);
												}
											}

									}
									//}
									/*if(!stData.equals(""))	
								stRawData.add(stData);	*/
								}
							}
							else if(TC.equals("10")||TC.equals("20"))
							{

								if(TCR_Code.equals("00"))
								{

									String[] DE =  Data_Elements.get(i).split("\\|");
									String stData = "";

									//if(((DE[0].trim()).equals("Account Number")) || ((DE[0].trim()).equals("Source Amount"))|| ((DE[0].trim()).equals("Authorization Code")));
									/*if(DE[0].trim().equalsIgnoreCase("ACCOUNT NUMBER") ||
										DE[0].trim().equalsIgnoreCase("SOURCE AMOUNT") ||
										DE[0].trim().equalsIgnoreCase("Authorization Code"))
								{*/
									//logger.info("DE[0] "+DE[0]);
									//	logger.info("DE LENGTH IS "+DE.length);
									if(DE.length == 3)
									{
										int ststart_Pos = Integer.parseInt(DE[1].trim());
										int stEnd_pos = Integer.parseInt(DE[2].trim());
										/*logger.info("start positon "+ststart_Pos);
								logger.info("End Position "+stEnd_pos);
								logger.info("stHeader : "+DE[0]+" Value : "+stline.substring((ststart_Pos-1), stEnd_pos).replaceAll("^0*",""));*/

										if(DE[0].equalsIgnoreCase("ACCOUNT NUMBER"))
										{
											stData = stline.substring((ststart_Pos-1), stEnd_pos).replaceAll("^0*","").trim();
											stRawData.add(stData);
										}
										else if(DE[0].equalsIgnoreCase("SOURCE AMOUNT") || DE[0].equalsIgnoreCase("DESTINATION AMOUNT")) {

											SOURCE_AMT = stline.substring((ststart_Pos-1), stEnd_pos).replaceAll("^0*","").trim();
											stData = String.valueOf((Float.parseFloat(SOURCE_AMT)/100));
											stRawData.add(stData);
											//logger.info("AMT IS "+SOURCE_AMT+" check this "+amt);
										}
										else //if(DE[0].equalsIgnoreCase("AUTHORIZATION CODE"))
											if( 	DE[0].equalsIgnoreCase("Destination BIN") ||
													DE[0].equalsIgnoreCase("Source BIN") ||
													DE[0].equalsIgnoreCase("Reason Code") ||
													DE[0].equalsIgnoreCase("Country Code") ||
													DE[0].equalsIgnoreCase("Event Date (MMDD)") ||
													DE[0].equalsIgnoreCase("Account Number") ||
													//	DE[0].equalsIgnoreCase("Destination Amount") ||
													DE[0].equalsIgnoreCase("Destination Currency Code") ||
													DE[0].equalsIgnoreCase("Source Amount")||
													DE[0].equalsIgnoreCase("Source Currency Code") ||
													DE[0].equalsIgnoreCase("Settlement Flag") ||
													DE[0].equalsIgnoreCase("Transaction Identifier") ||
													DE[0].equalsIgnoreCase("Central Processing Date (YDDD)") ||
													DE[0].equalsIgnoreCase("Reimbursement Attribute") ||
													DE[0].equalsIgnoreCase("Message Text"))


											{
												//AUTH_CODE = stline.substring((ststart_Pos-1), stEnd_pos).replaceAll("^0*","").trim();
												stData = stline.substring((ststart_Pos-1), stEnd_pos).trim();
												stRawData.add(stData);
											}



									}
									else if(DE.length == 2)
									{
										int ststart_pos =  Integer.parseInt(DE[1].trim());
										if(DE[0].equalsIgnoreCase("ACCOUNT NUMBER"))
										{
											stData = stline.substring((ststart_pos-1), (ststart_pos)).replaceAll("^0*","").trim();
											stRawData.add(stData);
										}
										else if(DE[0].equalsIgnoreCase("SOURCE AMOUNT") || DE[0].equalsIgnoreCase("DESTINATION AMOUNT")) {
											try
											{
												SOURCE_AMT = stline.substring((ststart_pos-1), (ststart_pos)).replaceAll("^0*","").trim();
												stData = String.valueOf((Float.parseFloat(SOURCE_AMT)/100));
												stRawData.add(stData);
											}
											catch(Exception e)
											{
												logger.info("Exception in visa issuer on line "+stline);
											}
										}
										else //if(DE[0].equalsIgnoreCase("AUTHORIZATION CODE"))
											if(	DE[0].equalsIgnoreCase("Destination BIN") ||
													DE[0].equalsIgnoreCase("Source BIN") ||
													DE[0].equalsIgnoreCase("Reason Code") ||
													DE[0].equalsIgnoreCase("Country Code") ||
													DE[0].equalsIgnoreCase("Event Date (MMDD)") ||
													DE[0].equalsIgnoreCase("Account Number") ||
													//DE[0].equalsIgnoreCase("Destination Amount") ||
													DE[0].equalsIgnoreCase("Destination Currency Code") ||
													DE[0].equalsIgnoreCase("Source Amount")||
													DE[0].equalsIgnoreCase("Source Currency Code") ||
													DE[0].equalsIgnoreCase("Settlement Flag") ||
													DE[0].equalsIgnoreCase("Transaction Identifier") ||
													DE[0].equalsIgnoreCase("Central Processing Date (YDDD)") ||
													DE[0].equalsIgnoreCase("Reimbursement Attribute") ||
													DE[0].equalsIgnoreCase("Message Text"))

											{
												//AUTH_CODE = stline.substring((ststart_pos-1), (ststart_pos)).replaceAll("^0*","").trim();
												stData = stline.substring((ststart_pos-1), (ststart_pos)).trim();
												stRawData.add(stData);
											}

									}
									//}
									/*if(!stData.equals(""))	
								stRawData.add(stData);	*/
								}

							}
							else if(TC.equals("33"))
							{
								String stLine = stline.substring(34 , stline.length());
								if(check_TCR.equals("200"))
								{
									//GET VARIABLES FOR DECIMAL AND SIGN
									String sign = "";
									String last_Digit = "";
									String[] DE =  Data_Elements.get(i).split("\\|");

									if(DE[0].equalsIgnoreCase("Trace Number")||
											DE[0].equalsIgnoreCase("Response Code")	||
											DE[0].equalsIgnoreCase("Retrieval Reference Number")||
											DE[0].equalsIgnoreCase("Card Number")||
											DE[0].equalsIgnoreCase("Transaction Amount")||
											DE[0].equalsIgnoreCase("Request Message Type"))
									{
										if(DE.length == 3)
										{
											int ststart_Pos = Integer.parseInt(DE[1].trim());
											int stEnd_pos = Integer.parseInt(DE[2].trim());
											/*logger.info("start positon "+ststart_Pos);
								logger.info("End Position "+stEnd_pos);
								logger.info("stHeader : "+DE[0]+" Value : "+stline.substring((ststart_Pos-1), stEnd_pos).replaceAll("^0*",""));*/

											if(DE[0].equalsIgnoreCase("Trace Number"))
											{
												//TRACE = stLine.substring((ststart_Pos-1), stEnd_pos).replaceAll("^0*","").trim();
												TRACE = stLine.substring((ststart_Pos-1), stEnd_pos).trim();
											}
											else if(DE[0].equalsIgnoreCase("Request Message Type"))
											{
												REQ_MSG_TYPE = stLine.substring((ststart_Pos-1), stEnd_pos).replaceAll("^0*","").trim();
											}
											else if(DE[0].equalsIgnoreCase("Response Code")) 
											{
												RESPONSE_CODE = stLine.substring((ststart_Pos-1), stEnd_pos).trim();
												//logger.info("AMT IS "+SOURCE_AMT+" check this "+amt);
											}
											else if(DE[0].equalsIgnoreCase("Retrieval Reference Number"))
											{
												REFERENCE_NUMBER = stLine.substring((ststart_Pos-1), stEnd_pos).replaceAll("^0*","").trim();
											}
											else if(DE[0].equalsIgnoreCase("Card Number"))
											{
												CARD_NUMBER = stLine.substring((ststart_Pos-1), stEnd_pos).replaceAll("^0*","").trim();
											}
											else if(DE[0].equalsIgnoreCase("Transaction Amount"))
											{
												try
												{
													SOURCE_AMT = stLine.substring((ststart_Pos-1), (stEnd_pos)).replaceAll("^0*","").trim();
													//check for the list of variables provided by visa for decimal position
													for(int j =0; j< Amount_translation.size() ; j++ )
													{
														String[] data =  Amount_translation.get(j).split("\\|");
														if(SOURCE_AMT.contains(data[0]))
														{
															if(data[2].equals("-"))
															{
																SOURCE_AMT = data[2]+SOURCE_AMT.replace(data[0], data[1]);
															}
															else
															{
																SOURCE_AMT = SOURCE_AMT.replace(data[0], data[1]);
															}
														}

													}
													amt = (Float.parseFloat(SOURCE_AMT)/100);
													//logger.info("amt is "+amt);
												}
												catch(Exception e)
												{
													logger.info("Exception in TC 33 on line "+stline);
												}
											}



										}
										else if(DE.length == 2)
										{
											int ststart_Pos =  Integer.parseInt(DE[1].trim());
											if(DE[0].equalsIgnoreCase("Trace Number"))
											{
												//TRACE = stLine.substring((ststart_Pos-1), ststart_Pos).replaceAll("^0*","").trim();
												TRACE = stLine.substring((ststart_Pos-1), ststart_Pos).trim();
											}
											else if(DE[0].equalsIgnoreCase("Response Code")) {

												RESPONSE_CODE = stLine.substring((ststart_Pos-1), ststart_Pos).trim();
												//logger.info("AMT IS "+SOURCE_AMT+" check this "+amt);
											}
											else if(DE[0].equalsIgnoreCase("Request Message Type"))
											{
												REQ_MSG_TYPE = stLine.substring((ststart_Pos-1), ststart_Pos).replaceAll("^0*","").trim();
											}
											else if(DE[0].equalsIgnoreCase("Retrieval Reference Number"))
											{
												REFERENCE_NUMBER = stLine.substring((ststart_Pos-1), ststart_Pos).replaceAll("^0*","").trim();
											}
											else if(DE[0].equalsIgnoreCase("Card Number"))
											{
												CARD_NUMBER = stLine.substring((ststart_Pos-1), ststart_Pos).replaceAll("^0*","").trim();
											}
											else if(DE[0].equalsIgnoreCase("Transaction Amount"))
											{
												SOURCE_AMT = stLine.substring((ststart_Pos-1), (ststart_Pos)).replaceAll("^0*","").trim();

												for(int j =0; j< Amount_translation.size() ; j++ )
												{
													String[] data =  Amount_translation.get(j).split("\\|");
													if(SOURCE_AMT.contains(data[0]))
													{
														if(data[2].equals("-"))
														{
															SOURCE_AMT = data[2]+SOURCE_AMT.replace(data[0], data[1]);
														}
														else
														{
															SOURCE_AMT = SOURCE_AMT.replace(data[0], data[1]);
														}
													}

												}

												amt = (Float.parseFloat(SOURCE_AMT)/100);
											}

										}
									}
								}


							}
						}
					}
					/*logger.info("TRACE "+TRACE);
					logger.info("REF NO "+REFERENCE_NUMBER);
					logger.info("AMOUNT "+SOURCE_AMT);
					logger.info("CARD NUMB "+CARD_NUMBER);
					logger.info("RESP CODE "+RESPONSE_CODE);
					
					*/
					if(TC.equals("05")||TC.equals("06")||TC.equals("07")||TC.equals("25")||TC.equals("27"))
					{
						count++;
						if(TCR_Code.equals("00"))
						{
							ResultSet rset2 =pstmt2.executeQuery();
							if(rset2.next())
							{
								seq = rset2.getString("SEQ");
							}
						}
						
						//Insertint in input table first
						pstmt1.setString(1, TC);
						pstmt1.setString(2, TCR_Code);
						pstmt1.setString(3, stline);
						pstmt1.setString(4, seq+"");
						/*pstmt1.setString(5, "28/09/2017");*/
						pstmt1.setString(5, setupBean.getFileDate());

						pstmt1.addBatch();

						if(TCR_Code.equals("00"))
						{
							read_stmt_05.setString(1, TC);
							read_stmt_05.setString(2, TCR_Code);
							/*read_stmt.setString(3, ACC_NO);
							read_stmt.setString(4, amt+"");
							read_stmt.setString(5, AUTH_CODE);*/
							read_stmt_05.setString(3, seq+"");
							/*read_stmt.setString(7, "28/09/2017");*/
							read_stmt_05.setString(4, setupBean.getFileDate());
							read_stmt_05.setString(5, "1");
							int index = 6;
							for(int m = 0;m<stRawData.size();m++)
							{
								read_stmt_05.setString(index, stRawData.get(m));
								index++;
							}
							

							read_stmt_05.addBatch();
						}

						/*if(count == 10000)
						{
							count = 1;
							read_stmt_05.executeBatch();
							pstmt1.executeBatch();
							logger.info("Exceuted batch "+batch);
							batch++;

						}*/
					}
					else if(TC.equals("10")||TC.equals("20"))
					{

						count++;
						if(TCR_Code.equals("00"))
						{
							ResultSet rset2 =pstmt2.executeQuery();
							if(rset2.next())
							{
								seq = rset2.getString("SEQ");
							}
						}
						
						//Insertint in input table first
						pstmt1.setString(1, TC);
						pstmt1.setString(2, TCR_Code);
						pstmt1.setString(3, stline);
						pstmt1.setString(4, seq+"");
						/*pstmt1.setString(5, "28/09/2017");*/
						pstmt1.setString(5, setupBean.getFileDate());

						pstmt1.addBatch();

						if(TCR_Code.equals("00"))
						{
							read_stmt_10.setString(1, TC);
							read_stmt_10.setString(2, TCR_Code);
							/*read_stmt.setString(3, ACC_NO);
							read_stmt.setString(4, amt+"");
							read_stmt.setString(5, AUTH_CODE);*/
							read_stmt_10.setString(3, seq+"");
							/*read_stmt.setString(7, "28/09/2017");*/
							read_stmt_10.setString(4, setupBean.getFileDate());
							read_stmt_10.setString(5, "1");
							int index = 6;
							for(int m = 0;m<stRawData.size();m++)
							{
								read_stmt_10.setString(index, stRawData.get(m));
								index++;
							}
							

							read_stmt_10.addBatch();
						}

						/*if(count == 10000)
						{
							count = 1;
							read_stmt_10.executeBatch();
							pstmt1.executeBatch();
							logger.info("Exceuted batch "+batch);
							batch++;

						}*/
					
					}
					else if(TC.equals("33"))
					{
						count++;					
						//if(check_TCR.equals("200"))
						if(check_TCR.equals("200") || containsVISATable)
						{
							ResultSet rset2 =pstmt2.executeQuery();
							if(rset2.next())
							{
								seq = rset2.getString("SEQ");
							}
						}
						
						//Insertint in input table first
						pstmt1.setString(1, TC);
						pstmt1.setString(2, check_TCR);
						pstmt1.setString(3, stline);
						pstmt1.setString(4, seq+"");
						/*pstmt1.setString(5, "28/09/2017");*/
						pstmt1.setString(5, setupBean.getFileDate());
						

						pstmt1.addBatch();
						
						if(check_TCR.equals("200") && !containsVISATable)
						{

							pstmt33.setString(1, TC);
							pstmt33.setString(2, check_TCR);
							pstmt33.setString(3, CARD_NUMBER);
							pstmt33.setString(4, amt+"");
							pstmt33.setString(5, TRACE);
							pstmt33.setString(6, REFERENCE_NUMBER);
							pstmt33.setString(7, RESPONSE_CODE);
							pstmt33.setString(8, seq);
							//pstmt33.setString(9, "28/09/2017");
							pstmt33.setString(9, setupBean.getFileDate());
							pstmt33.setString(10, "1");
							pstmt33.setString(11, REQ_MSG_TYPE);

							pstmt33.addBatch();
						}
						/*if(count == 500)
						{
							count = 1;
							pstmt33.executeBatch();
							pstmt1.executeBatch();
							logger.info("Exceuted batch "+batch);
							batch++;

						}*/
						
						
						
					}
					if(count == 10000)
					{
						count = 1;
						//INSERTING ISSUER DATA
						pstmt1.executeBatch();
						read_stmt_05.executeBatch();
						read_stmt_10.executeBatch();
						//INSERTIN TC 33 DATA
						pstmt1.executeBatch();
						pstmt33.executeBatch();
						logger.info("EXECUTED BATCH "+batch);
						batch++;
						
						
						
					}
					
					stline = br.readLine();
				}
				
					
			
			read_stmt_05.executeBatch();
			read_stmt_10.executeBatch();
			pstmt1.executeBatch();
			pstmt33.executeBatch();
			
			logger.info("Completed Reading");
			
			logger.info("***** ReadVisaFile.readData End ****");
			
		}
		catch(Exception e)
		{
			logger.error(" error in ReadVisaFile.readData", new Exception("ReadVisaFile.readData",e));
			return false;
		}
		finally
		{
			
			
			if(br != null)
			{
				try
				{
					br.close();
				}
				catch(Exception e)
				{
					logger.error(" error in ReadVisaFile.readData", new Exception("ReadVisaFile.readData",e));
				}
			}
		}
		return true;
	
	}
	
	

	
	
	
	public static void main(String args[])
	{
		try
		{
		OracleConn oracon = new OracleConn();
		readFile("\\D:\\",oracon.getconn());
		}
		catch(Exception e)
		{
			
		}
	}

}
