package com.recon.dao.impl;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import oracle.jdbc.OracleTypes;

import org.apache.log4j.Logger;
import org.codehaus.jackson.map.Module.SetupContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.SqlOutParameter;
import org.springframework.jdbc.core.SqlParameter;
import org.springframework.jdbc.core.support.JdbcDaoSupport;
import org.springframework.jdbc.object.StoredProcedure;
import org.springframework.stereotype.Component;

import com.ibm.icu.text.SimpleDateFormat;
import com.recon.control.ReconProcess;
import com.recon.dao.IReconProcessDao;
import com.recon.dao.impl.FilterationDaoImpl.KnockoffTTUM;
import com.recon.model.CompareBean;
import com.recon.model.CompareSetupBean;
import com.recon.model.FilterationBean;
import com.recon.model.KnockOffBean;
import com.recon.service.CompareRupayService;
import com.recon.service.CompareService;
import com.recon.service.FilterationService;
import com.recon.service.ICompareConfigService;
import com.recon.util.demo;
import com.sun.org.apache.xalan.internal.xsltc.runtime.Hashtable;

@Component
public class ReconProcessDaoImpl extends JdbcDaoSupport implements IReconProcessDao {

	@Autowired FilterationService filterationService;
	
	@Autowired CompareService compareService;
	
	@Autowired
	CompareRupayService compareRupayService;
	
	@Autowired ICompareConfigService icompareConfigService;
	
	private static final Logger logger = Logger.getLogger(ReconProcessDaoImpl.class);
	
	
	@Override
	public String chkFileUpload(String Category, String filedate, List<CompareSetupBean> compareSetupBeans,String subCat) throws Exception {	 logger.info("***** ReconProcessDaoImpl.chkFileUpload Start ****");
	String msg=null,flg,compareflag;
try{
	for (CompareSetupBean setupBean : compareSetupBeans) {
		
	 
		if(!(setupBean.getStFileName().equalsIgnoreCase("REV_REPORT")))	 {
		logger.info(setupBean.getInFileId());
	 
	 //modified by int5779
	/*String query="SELECT UPLOAD_FLAG FROM MAIN_FILE_UPLOAD_DTLS WHERE to_char(filedate,'dd/mm/yyyy') =  to_char(to_date('"+filedate+"','dd/mm/yyyy'),'dd/mm/yyyy') "
			+ " AND CATEGORY = '"+Category+"' AND FileId = "+setupBean.getInFileId()+" AND FILE_SUBCATEGORY='"+subCat+"' "; */
	 String query="SELECT UPLOAD_FLAG FROM MAIN_FILE_UPLOAD_DTLS WHERE to_char(filedate,'dd/mm/yyyy') =  to_char(to_date('"+filedate+"','dd/mm/yyyy'),'dd/mm/yyyy') "
				+"AND FileId = "+setupBean.getInFileId(); 
	
	query = " SELECT CASE WHEN exists ("+ query+") then ("+query+") else 'N' end as FLAG from dual"; 
	
	logger.info("Query=="+query);
	 
	flg = getJdbcTemplate().queryForObject(query, String.class);
	
	
	//Check Compare Flag
	query="";
	  query="SELECT COMAPRE_FLAG FROM MAIN_FILE_UPLOAD_DTLS WHERE to_char(filedate,'dd/mm/yyyy') =  to_char(to_date('"+filedate+"','dd/mm/yyyy'),'dd/mm/yyyy') "
				+"AND FileId = "+setupBean.getInFileId(); 
	
	query = " SELECT CASE WHEN exists ("+ query+") then ("+query+") else 'N' end as FLAG from dual"; 
	
	compareflag = getJdbcTemplate().queryForObject(query, String.class);
	
	if(compareflag.equalsIgnoreCase("N")) {
			if(flg.equalsIgnoreCase("N")){
				
				msg = "Files are Not Uploaded.";
				logger.info("msg=="+msg);
				return msg;
			}
			else //CHANGES MADE BY INT5779 AS ON 03 MARCH TO check whether manual file is uploaded for CBS file
			{
				if(setupBean.getStFileName().equalsIgnoreCase("CBS"))
				{
					String MANUAL_FILE_CHECK ="SELECT MANUPLOAD_FLAG FROM MAIN_FILE_UPLOAD_DTLS WHERE to_char(filedate,'dd/mm/yyyy') =  to_char(to_date('"+filedate+"','dd/mm/yyyy'),'dd/mm/yyyy') "
							+"AND FileId = "+setupBean.getInFileId(); 
				
					MANUAL_FILE_CHECK = " SELECT CASE WHEN exists ("+ MANUAL_FILE_CHECK+") then ("+MANUAL_FILE_CHECK+") else 'N' end as FLAG from dual"; 
					logger.info("MANUAL_FILE_CHECK== "+MANUAL_FILE_CHECK);
					 
					flg = getJdbcTemplate().queryForObject(MANUAL_FILE_CHECK, String.class);
					if(flg.equalsIgnoreCase("N"))
					{
						msg = "Manual File is not uploaded";
						logger.info("msg=="+msg);
						return msg;
					}
					
				}
					
				
			}
		} else {
			
			msg = "Files are Already Processed.";
			logger.info("msg=="+msg);
			return msg;
			
		}
	
	}
	}
	 logger.info("***** ReconProcessDaoImpl.chkFileUpload End ****");
	 
}catch(Exception ex) {
	 logger.error(" error in ReconProcessDaoImpl.chkFileUpload", new Exception("ReconProcessDaoImpl.chkFileUpload",ex));
	throw ex;
}
	
	return msg;
	
	}

	/*@Override
	public List<CompareSetupBean> getFileList(String category, String filedate ,String subcat) {
		
		try {
		List<CompareSetupBean>compareSetupBeans = new ArrayList<CompareSetupBean>();
		String query = "";
		String stSubCate = "";
		if(!subcat.equals("-"))
		{
			 //"'"+subcat+"'";
			stSubCate = "";
			query = "SELECT distinct regexp_substr(FILE1_CATEGORY,'[^_]+',"+(category.length()+1)+") AS SUBCATEGORIES FROM MAIN_RECON_SEQUENCE  WHERE RECON_CATEGORY =?";

			List<String> stSub_Category = getJdbcTemplate().query(query , new Object[] {category+"_"+subcat} ,new AllSubCategories());
			for(int i = 0 ;i<stSub_Category.size() ; i++)
			{
				if(i>0)
					stSubCate = stSubCate+",'"+stSub_Category.get(i)+"'";
				else
					stSubCate = "'"+stSub_Category.get(i)+"'";

			}

			query = "SELECT distinct regexp_substr(FILE2_CATEGORY,'[^_]+',"+(category.length()+1)+") AS SUBCATEGORIES FROM MAIN_RECON_SEQUENCE  WHERE RECON_CATEGORY =?" +
					" AND regexp_substr(FILE2_CATEGORY,'[^_]+',6) NOT IN("+stSubCate+")";

			stSub_Category = getJdbcTemplate().query(query , new Object[] {category+"_"+subcat} ,new AllSubCategories());
			for(int i = 0 ;i<stSub_Category.size() ; i++)
			{
				stSubCate = stSubCate+",'"+stSub_Category.get(i)+"'";

			}
		}
		else
		{
			stSubCate = "'"+subcat+"'";
		}
		
		
		 query = "Select FileId as inFileId , Filename as stFileName,FILTERATION as filter_Flag,KNOCKOFF as knockoff_Flag,FILE_SUBCATEGORY AS stSubCategory " +
		 		"FROM MAIN_FILESOURCE WHERE FILE_CATEGORY = '"+category+"' and FILE_SUBCATEGORY in ("+stSubCate+")"
				+ " order by (case  when stFileName = 'SWITCH' then 1 when stFileName ='CBS' then 2  end) ASC"; 
	
			
		compareSetupBeans = getJdbcTemplate().query(query,new BeanPropertyRowMapper(CompareSetupBean.class));
		
		
		return compareSetupBeans;
		}catch(Exception ex) {
			
			ex.printStackTrace();
			return null;
		}
	}*/
	
	@Override
	public List<CompareSetupBean> getFileList(String category, String filedate ,String subcat) throws Exception {
		
		try {
			 logger.info("***** ReconProcessDaoImpl.getFileList Start ****");
		List<CompareSetupBean>compareSetupBeans = new ArrayList<CompareSetupBean>();
		String query = "";
		String stSubCate = "";
		if(!subcat.equals("-"))
		{
			 //"'"+subcat+"'";
			stSubCate = "";
			query = "SELECT distinct regexp_substr(FILE1_CATEGORY,'[^_]+',"+(category.length()+1)+") AS SUBCATEGORIES FROM MAIN_RECON_SEQUENCE  WHERE RECON_CATEGORY =?";

			List<String> stSub_Category = getJdbcTemplate().query(query , new Object[] {category+"_"+subcat} ,new AllSubCategories());
			for(int i = 0 ;i<stSub_Category.size() ; i++)
			{
				if(i>0)
					stSubCate = stSubCate+",'"+stSub_Category.get(i)+"'";
				else
					stSubCate = "'"+stSub_Category.get(i)+"'";

			}

 			query = "SELECT distinct LTRIM(regexp_substr(FILE2_CATEGORY,'[^-]+',"+(category.length()+1)+"),'_') AS SUBCATEGORIES FROM MAIN_RECON_SEQUENCE  WHERE RECON_CATEGORY =?" +
					" AND regexp_substr(FILE2_CATEGORY,'[^-]+',6) NOT IN("+stSubCate+")";

			stSub_Category = getJdbcTemplate().query(query , new Object[] {category+"_"+subcat} ,new AllSubCategories());
			for(int i = 0 ;i<stSub_Category.size() ; i++)
			{
				stSubCate = stSubCate+",'"+stSub_Category.get(i)+"'";

			}
		}
		else
		{
			stSubCate = "'"+subcat+"'";
		}
		
		
		 query = "Select FileId as inFileId , Filename as stFileName,FILTERATION as filter_Flag,KNOCKOFF as knockoff_Flag,FILE_SUBCATEGORY AS stSubCategory " +
		 		"FROM MAIN_FILESOURCE WHERE FILE_CATEGORY = '"+category+"' and FILE_SUBCATEGORY in ("+stSubCate+")"
				+ " order by (case  when stFileName = 'SWITCH' then 1 when stFileName ='CBS' then 2  end) ASC"; 
		 
		 logger.info("FILE ID== "+query);
	
		// added on 03/07/2018
	/*	query = "Select FileId as inFileId , Filename as stFileName,FILTERATION as filter_Flag,KNOCKOFF as knockoff_Flag,FILE_SUBCATEGORY AS stSubCategory " +
		 		"FROM MAIN_FILESOURCE WHERE FILE_CATEGORY = '"+category+"' and FILE_SUBCATEGORY like '%"+stSubCate+"%'"
				+ " order by (case  when stFileName = 'SWITCH' then 1 when stFileName ='CBS' then 2  end) ASC"; */
		
			
		compareSetupBeans = getJdbcTemplate().query(query,new BeanPropertyRowMapper(CompareSetupBean.class));
		
		
		return compareSetupBeans;
		}catch(Exception ex) {
			demo.logSQLException(ex, "ReconProcessDaoImpl.getFileList");
			 logger.error(" error in ReconProcessDaoImpl.getFileList", new Exception("ReconProcessDaoImpl.getFileList",ex));
			//ex.printStackTrace();
			return null;
		}
	}
	
	//added by int5779
	private static class AllSubCategories implements RowMapper<String> {

		@Override
		public String mapRow(ResultSet rs, int rowNum) throws SQLException {
			
			String stSubCat = rs.getString("SUBCATEGORIES");
			
			
			return stSubCat;
			
			

		}
	}

	@Override
	public String validateFile(String category,
			List<CompareSetupBean> compareSetupBeans, String filedate) throws Exception {
		logger.info("***** ReconProcessDaoImpl.validateFile Start ****");
		String msg=null;
		int count=0;
		try{
			//logger.info("validateFile Entry");
		
			for (CompareSetupBean setupBean : compareSetupBeans) {
			
				//get FILTER, KNOCKOFF FLAGS
				String GET_FLAGS = "SELECT FILTERATION FROM MAIN_FILESOURCE WHERE FILEID = ?";
				
				String stFliter_Flag = getJdbcTemplate().queryForObject(GET_FLAGS, new Object[]{setupBean.getInFileId()},String.class);
				
				GET_FLAGS = "SELECT KNOCKOFF FROM MAIN_FILESOURCE WHERE FILEID = ?";
				
				String stKnockoff_Flag = getJdbcTemplate().queryForObject(GET_FLAGS, new Object[]{setupBean.getInFileId()},String.class);
				
				
				String stCompare_Flag ="Y";
				
				if(setupBean.getStFileName().equalsIgnoreCase("REV_REPORT")) {
					
					stCompare_Flag="N";
				}
				
				
			
			
			String tablename = getJdbcTemplate().queryForObject( "select tablename from MAIN_FILESOURCE where FILEID = "+setupBean.getInFileId(),String.class);
			String chkData=null;
			//Get table name from main table
			if(category.equals("CARDTOCARD"))
			{
				chkData="select count(*) from CARD_TO_CARD_CBS_RAWDATA "
				+ " where TO_CHAR(to_date(CREATEDDATE,'dd-MON-YY'),'dd-MON-YY') < TO_CHAR(sysdate,'DD/MM/YYYY')";
			}else
			{
				chkData="select count(*) from "+tablename+" where TO_CHAR(CREATEDDATE,'DD/MM/YYYY') < TO_CHAR(sysdate,'DD/MM/YYYY')";
			
			}
//			String chkData = "SELECT COUNT(*) FROM MAIN_FILE_UPLOAD_DTLS WHERE TO_CHAR(FILEDATE,'DD/MM/YYYY') != '"+filedate+"'"
//							+" AND FILEID = '"+setupBean.getInFileId()+"' AND CATEGORY = '"+category+"' AND FILE_SUBCATEGORY = '"+setupBean.getStSubCategory()+"'" ;
			
			/*String chkData = "SELECT COUNT(*) FROM MAIN_FILE_UPLOAD_DTLS WHERE TO_CHAR(FILEDATE,'DD/MM/YYYY') != '"filedate"'"+
							" AND FILEID = '"+setupBean.getInFileId()+"'";*/
			
			logger.info("chkData == "+chkData);
			
			
			//CHECKING WHETHER ANY DATA IS PRESENT
			int dataCount = getJdbcTemplate().queryForObject(chkData, Integer.class); 
			String query = "";
			if(dataCount>0){
			
				//CHECKING RECORDS FOR PREVIOUS DAY
				//IF FILE IS SWITCH OR CBS THEN CHECK MANUAL FILE FLAG TOO
				if(setupBean.getStFileName().equalsIgnoreCase("CBS")|| setupBean.getStFileName().equalsIgnoreCase("SWITCH"))
				{
					query = "SELECT count (*) FROM MAIN_FILE_UPLOAD_DTLS WHERE (TRUNC (filedate)) = (TRUNC (TO_DATE ('"+filedate+"', 'dd/mm/yyyy') - 1) ) "
						+ "	AND Fileid ="+setupBean.getInFileId()+" AND category='"+category+"' "
						+ " AND FILTER_FLAG= ? AND KNOCKOFF_FLAG=? AND COMAPRE_FLAG='Y' "
						+ " AND UPLOAD_FLAG='Y' AND MANUALCOMPARE_FLAG = 'Y'  ";
				
				}
				else
				{	
					
					query = "SELECT count (*) FROM MAIN_FILE_UPLOAD_DTLS WHERE (TRUNC (filedate)) = (TRUNC (TO_DATE ('"+filedate+"', 'dd/mm/yyyy') - 1) ) "
						+ "	AND Fileid ="+setupBean.getInFileId()+" AND category='"+category+"' "
						+ " AND FILTER_FLAG= ? AND KNOCKOFF_FLAG=? AND COMAPRE_FLAG='"+stCompare_Flag+"' "
						+ " AND UPLOAD_FLAG='Y'  ";
					
				}
				logger.info("query=="+query);
				if(!setupBean.getStFileName().equalsIgnoreCase("REV_REPORT")) {
					//count = getJdbcTemplate().queryForObject(query, Integer.class); 
					count = getJdbcTemplate().queryForObject(query, new Object[] {stFliter_Flag,stKnockoff_Flag} ,Integer.class);
					//rs=ps.executeQuery();
					if(count>0){
						
						//Previous File Processed.
					
					}else {
						msg=msg+"Previous File not Processed.";
						logger.info("msg=="+msg);
						
					}
				}
			}
			
			
			}
			logger.info("***** ReconProcessDaoImpl.validateFile End ****");
			return msg;
		
		}catch(Exception ex){
			demo.logSQLException(ex, "ReconProcessDaoImpl.validateFile");
			logger.error(" error in ReconProcessDaoImpl.validateFile", new Exception("ReconProcessDaoImpl.validateFile",ex));
			return msg;
		}
		
		
			
		
		
	}

	@Override
	public boolean processFile(String category,List<CompareSetupBean> compareSetupBeans, String filedate,String Createdby,String subcat ) throws Exception {
		
		boolean result = false;
		String StMerger_Category="";
		String stCategory = category;
		
		logger.info("***** ReconProcessDaoImpl.processFile Start ****");
		
		try{
		
		if(!category.equals("NFS")&& !(category.equals("CASHNET"))){
		for (CompareSetupBean setupBean : compareSetupBeans) {
			
			String subCat = setupBean.getStSubCategory();
			if(!subCat.equals("-"))
			{
				//stCategory = generateTTUMBean.getStCategory()+"_"+generateTTUMBean.getStSubCategory();
				StMerger_Category  =category+"_"+subCat.substring(0, 3);
				//compareBean.setStSub_Category_substr(subcat.substring(0,3));
				stCategory = stCategory+"_"+subCat;
			}
			else 
			{
				
				StMerger_Category = category;
			}
			
			logger.info(setupBean.getInFileId());
			
			setupBean.setFileDate(filedate);
			setupBean.setCategory(category);
			setupBean.setStSubCategory(subCat);
			
			String stknockoff_Status;
			String stFilter_Status;
	
			FilterationBean filterBean = new FilterationBean();
			filterBean.setStEntry_by(Createdby);
			filterBean.setStCategory(category);
			filterBean.setStSubCategory(subCat);
			filterBean.setStFile_Name(setupBean.getStFileName().toUpperCase());
			filterBean.setStFile_date(filedate);
			filterBean.setStMerger_Category(StMerger_Category);
			filterBean.setFileId(setupBean.getInFileId());
			
			
			
			if(icompareConfigService.chkFlag("Filter_FlAG", setupBean).equalsIgnoreCase("N")
					&& icompareConfigService.chkFlag("Upload_FLAG", setupBean).equalsIgnoreCase("Y")) 
			{
				logger.info("Checked Filter_FlAG = N and Upload_FLAG = Y");
					
				 stFilter_Status = filterationService.getStatus(filterBean,"FILTERATION");
					if(stFilter_Status.equals("Y")){
						
					logger.info("File to be processed is of date "+ filterBean.getStFile_date());
	
					// 1. get all search parameters from main_compare_details
					List<FilterationBean> search_params = filterationService.getSearchParams(filterBean);
					filterBean.setSearch_params(search_params);
	
					// 2. Generate seg_tran_id
					int seg_tran_id = filterationService.getseg_tran_id();
	
					filterBean.setInseg_tran_id(seg_tran_id);
	
					// 3. Make an entry in SEGREGATE TABLE
					int entry_done = filterationService.addEntry(filterBean);
					// logger.info("hello : "+entry_done);
					
					logger.info("entry_done=="+entry_done);
	
					if (entry_done == 1) {
						// check whether table is already present if not then
						// create it
	
						// 4. Get data from RAW table using search parameters
						// and then insert those records in table
						
						//minakshi changes for ttum knockoff 26/06/2018
						filterationService.getReconRecords(filterBean,setupBean.getFileDate());
						
						filterationService.filterRecords(filterBean);
						//PLACED BY INT5779 ON 21ST MARCH 2018 AS PREVIOUS DATE UNRECON RECORDS WERE NOT GETTING CLASSIFIED AS CIA-GL
						//filterationService.getReconRecords(filterBean,setupBean.getFileDate());
						
						//classifying cia-gl records
						if(filterBean.getStFile_Name().equalsIgnoreCase("CBS"))
							filterationService.CIA_GL_classsification(filterBean);
						
						// 5. update status in main_seg_txn table
						filterationService.updateseg_txn(filterBean);
						
						icompareConfigService.updateFlag("Filter_FlAG", setupBean);
	
					}
				}
			
			} if(icompareConfigService.chkFlag("Knockoff_FLAG", setupBean).equalsIgnoreCase("N") && 
					icompareConfigService.chkFlag("Upload_FLAG", setupBean).equalsIgnoreCase("Y")) {
				
				logger.info("Checked Knockoff_FLAG = N and Upload_FLAG = Y");
				stknockoff_Status = filterationService.getStatus(filterBean,"KNOCKOFF");
				logger.info("stknockoff_Status=="+stknockoff_Status);
				if(stknockoff_Status.equals("Y"))
				{
				KnockOffBean knockoffBean = new KnockOffBean();
				// knockoff Auto Reversal Transactions
				knockoffBean.setStCategory(setupBean.getCategory());
				knockoffBean.setStSubCategory(subCat);
				knockoffBean.setStFile_Name(setupBean.getStFileName().toUpperCase());
				knockoffBean.setStMergeCategory(StMerger_Category);
				knockoffBean.setStEntry_by(Createdby);
			
				logger.info("*************KNOCK OFF STARTS ******************");
				knockoffBean.setStFile_date(setupBean.getFileDate());
				//filterationService.getReconRecords(filterBean,setupBean.getFileDate());
				filterationService.knockoffRecords(knockoffBean);
				icompareConfigService.updateFlag("Knockoff_FLAG", setupBean);
				}else {
					
					logger.info("Knockoff not configure");
					
					result= false;
				}
				
				
			}
			
		}
		}else {
			
			if(category.equals("NFS")) {
				logger.info("******** In NFS ***********");				
				if(subcat.equals("ISSUER")) {
					logger.info("******** In NFS - ISSUER ***********");	
					ISSClassifydata(category, subcat, filedate,Createdby );
					
					
				} else if(subcat.equals("ACQUIRER")) {
					logger.info("******** In NFS - ACQUIRER ***********");	
					AcqClassifydata(category, subcat, filedate, Createdby);
					
	
				}
		}else if(category.equals("CASHNET")) {
			logger.info("******** In CASHNET ***********");	
			if(subcat.equals("ISSUER")) {
				logger.info("******** In CASHNET - ISSUER ***********");	
				cashnetISSClassifydata(category, subcat, filedate,Createdby );
				
				
			} else if(subcat.equals("ACQUIRER")) {
				logger.info("******** In CASHNET - ACQUIRER ***********");	
				cashnetAcqClassifydata(category, subcat, filedate, Createdby);
				

			}
			
			
			}
			
		}
		
		CompareSetupBean setupBean =  chkStatus(compareSetupBeans, category, filedate);
		
		logger.info("knockoff"+setupBean.getKnockoff_Flag()+ "filter"+setupBean.getFilter_Flag());
		
		if(setupBean.getKnockoff_Flag().equals("Completed") && setupBean.getFilter_Flag().equals("Completed")) {
			
			
			result = true;
			
		}else {
			
			
			result= false;
		}
		logger.info("result=="+result);
		logger.info("***** ReconProcessDaoImpl.processFile End ****");
		
		}catch(Exception e){
			demo.logSQLException(e, "ReconProcessDaoImpl.processFile");
			logger.error(" error in ReconProcessDaoImpl.processFile", new Exception("ReconProcessDaoImpl.processFile",e));
			result= false;
		}
	
		return result;
	}
	
	private static class recSetIDMapper implements RowMapper<Integer> {

		@Override
		public Integer mapRow(ResultSet rs, int rowNum) throws SQLException {
			
			
			int rec_id_list = (rs.getInt("REC_SET_ID"));
			
			return rec_id_list;
			
			

		}
	}
	
	
	@Override
	public boolean compareFiles(String category, String filedate, CompareBean compareBean,String subcat,String dollar_val) throws Exception {
		
		boolean result = false;
		try
		{
			logger.info("***** ReconProcessDaoImpl.compareFiles Start ****");
			 //compareBean.setStEntryBy(((LoginBean) httpsession.getAttribute("loginBean")).getUser_id());
			//logger.info("file date is "+compareBean.getStFile_date());
			/*List<String> table_list = new ArrayList<>();
			table_list.add(compareBean.getStTable1());
			table_list.add(compareBean.getStTable2());
			*/
			//String[] a = compareBean.getStTable1().split("_");
			//String stCategory = a[0];
			compareBean.setStCategory(category);
			compareBean.setStSubCategory(subcat);
			compareBean.setStFile_date(filedate);
			
			
			
			if(category.contains("ONUS") || category.contains("AMEX") && !(category.equals("NFS")))
			{
				logger.info("********* In ONUS-AMEX-NFS ******");
				List<Integer> rec_set_id;
				
				String stCategory;
				if(!subcat.equals("-"))
				{
					stCategory = category+"_"+subcat;
					compareBean.setStMergeCategory(category+"_"+subcat.substring(0, 3));
					//compareBean.setStSub_Category_substr(subcat.substring(0,3));
				}
				else
				{
					stCategory = category;
					compareBean.setStMergeCategory(category);
				}
				
				rec_set_id = compareService.getRec_set_id(stCategory);
				logger.info("rec_set_id=="+rec_set_id);
				
				List<String> fileid= new ArrayList<String>(); 
				CompareSetupBean setupBean = new CompareSetupBean();
				setupBean.setFileDate(filedate);
				setupBean.setCategory(category);
				setupBean.setStSubCategory(subcat);
				
				for(int j= 0 ;j<rec_set_id.size() ; j++)
				{
					
					List<List<String>> tables_data = compareRupayService.getTableName(rec_set_id.get(j),category);
					logger.info("tables_data=="+tables_data);
					
					List<String> tables = tables_data.get(0);
					//List<String> tables_subcategory = tables_data.get(1);
					
					fileid.add(tables.get(0));
					fileid.add(tables.get(1));
					
					
					//TEMPORARY COMENTED TO CHECK RESPONSE CODE CODE
					
					if(chkStatus(setupBean, tables)){
					
						int  i = compareService.moveData(tables,compareBean,rec_set_id.get(j));
						if(i==1)
						{
							// compare logic
							compareService.updateMatchedRecords(tables,compareBean,rec_set_id.get(j));
							//logger.info("completed matching of records");
							
							//remove duplicate entries
							compareService.removeDuplicates(tables, compareBean, rec_set_id.get(j));
							
							compareService.moveToRecon(tables,compareBean);
							compareService.clearTables(tables,compareBean);
							
							//clearTables(tables, compareBean);
							
							//compareService.TTUMRecords(tables,compareBean.getStFile_date());
							result = true;
							logger.info("result=="+result);
	
						}
						 if(j == 0)
						{
							compareService.TTUMRecords(tables, compareBean, rec_set_id.get(j));
						}
				  } else {
					  
					  List<String> categories = new ArrayList<>();
						categories.add(subcat);
						categories.add(subcat);
					  updatereconstatus(setupBean,fileid,categories);
					  return false;
				  }
				}
				List<String> categories = new ArrayList<>();
				categories.add(subcat);
				categories.add(subcat);
				updatereconstatus(setupBean,fileid,categories);
				
			}
			else if(category.equals("CARDTOCARD"))
			{
				logger.info("********* In CARDTOCARD ******");
				try{
				String count_val="";
				String value=null;
				SimpleDateFormat sdf1 = new SimpleDateFormat("dd/mm/yyyy");
				SimpleDateFormat sdf2 = new SimpleDateFormat("mm/dd/yyyy");
				String date_val = sdf2.format(sdf1.parse(filedate));
				//S//tring concat=category+"_"+subcat;
				List<Integer> rec_set_id;
				
				String stCategory;
				if(!subcat.equals("-"))
				{
					stCategory = category+"_"+subcat;
					compareBean.setStMergeCategory(category+"_"+subcat.substring(0, 3));
					//compareBean.setStSub_Category_substr(subcat.substring(0,3));
				}
				else
				{
					stCategory = category;
					compareBean.setStMergeCategory(category);
				}
				
				rec_set_id = compareService.getRec_set_id(stCategory);
				logger.info("rec_set_id=="+rec_set_id);
				
				List<String> fileid= new ArrayList<String>(); 
				CompareSetupBean setupBean = new CompareSetupBean();
				setupBean.setFileDate(filedate);
				setupBean.setCategory(category);
				setupBean.setStSubCategory(subcat);
				
				for(int j= 0 ;j<rec_set_id.size() ; j++)
				{
					
					List<List<String>> tables_data = compareRupayService.getTableName(rec_set_id.get(j),category);
					logger.info("tables_data=="+tables_data);
					
					List<String> tables = tables_data.get(0);
					//List<String> tables_subcategory = tables_data.get(1);
					
					fileid.add(tables.get(0));
					fileid.add(tables.get(1));
					
					
					//TEMPORARY COMENTED TO CHECK RESPONSE CODE CODE
					
					if(chkStatus(setupBean, tables))
					{
				//String categ=category+"_"+subcat;
				String query="SELECT rec_set_id from MAIN_RECON_SEQUENCE WHERE  RECON_CATEGORY='"+category+"' order by rec_set_id ASC";
				logger.info("query=="+query);
				//int rec_id = getJdbcTemplate().queryForObject(query, new Object[] { category+"_"+subcat },Integer.class);
				PreparedStatement pst=getConnection().prepareStatement(query);
				ResultSet rs=pst.executeQuery();
				
				while(rs.next())
				{
					value=rs.getString("rec_set_id");
					if(value.equalsIgnoreCase("1"))
					{
						CardtoCard(category, date_val,value);
						CardtoCard_settle(category, date_val);
					}
					
				}}
				else{
					return false;
				}}
				}catch(Exception e)
				{
					demo.logSQLException(e, "ReconProcessDaoImpl.compareFiles");
					 logger.error(" error in  ReconProcessDaoImpl.compareFiles", new Exception(" ReconProcessDaoImpl.compareFiles",e));
					return false;
				}
				return true;
			
}
			
			//ONUS_POS
			else if(category.equals("POS"))
			{
				logger.info("********* In POS ******");
				try{
				String count_val="";
				String value=null;
				SimpleDateFormat sdf1 = new SimpleDateFormat("dd/mm/yyyy");
				SimpleDateFormat sdf2 = new SimpleDateFormat("mm/dd/yyyy");
				String date_val = sdf2.format(sdf1.parse(filedate));
				//S//tring concat=category+"_"+subcat;
				List<Integer> rec_set_id;
				
				String stCategory;
				if(!subcat.equals("-"))
				{
					stCategory = category+"_"+subcat;
					compareBean.setStMergeCategory(category+"_"+subcat.substring(0, 3));
					//compareBean.setStSub_Category_substr(subcat.substring(0,3));
				}
				else
				{
					stCategory = category;
					compareBean.setStMergeCategory(category);
				}
				
				rec_set_id = compareService.getRec_set_id(stCategory);
				logger.info("rec_set_id=="+rec_set_id);
				int j;
				int k = 0;
				List<String> fileid= new ArrayList<String>(); 
				CompareSetupBean setupBean = new CompareSetupBean();
				setupBean.setFileDate(filedate);
				setupBean.setCategory(category);
				setupBean.setStSubCategory(subcat);
				
				for(j= 0 ;j<rec_set_id.size() ; j++)
				{
					
					List<List<String>> tables_data = compareRupayService.getTableName(rec_set_id.get(j),category);
					logger.info("tables_data=="+tables_data);
					
					List<String> tables = tables_data.get(0);
					//List<String> tables_subcategory = tables_data.get(1);
					
					fileid.add(tables.get(0));
					fileid.add(tables.get(1));
					
					
					//TEMPORARY COMENTED TO CHECK RESPONSE CODE CODE
					
					if(chkStatus(setupBean, tables))
					{
						k=k+1;
						if(k==rec_set_id.size())
						{
				//String categ=category+"_"+subcat;
				String concat=category+"_"+subcat;
				String query="SELECT rec_set_id from MAIN_RECON_SEQUENCE WHERE  RECON_CATEGORY='"+concat+"' order by rec_set_id ASC";
				logger.info("query=="+query);
				//int rec_id = getJdbcTemplate().queryForObject(query, new Object[] { category+"_"+subcat },Integer.class);
				PreparedStatement pst=getConnection().prepareStatement(query);
				ResultSet rs=pst.executeQuery();
				
				while(rs.next())
				{
					value=rs.getString("rec_set_id");
					if(value.equalsIgnoreCase("1"))
					{
						Onus_Pos_Cycle1(concat, date_val,value);
					}
					else if(value.equalsIgnoreCase("2"))
					{
						Onus_Pos_Cycle2(concat, date_val,value);
					}
					else if(value.equalsIgnoreCase("3"))
					{
						Onus_Pos_Cycle3(concat, date_val,value);
						Onus_Pos_Settlment(category, date_val);
					}
					
				}
						}
				}else{
					return false;
				}}}
					catch(Exception e)
				{
						demo.logSQLException(e, "ReconProcessDaoImpl.compareFiles");
						logger.error(" error in  ReconProcessDaoImpl.compareFiles", new Exception(" ReconProcessDaoImpl.compareFiles",e));
					return false;
				}
				
				return true;
			}
			
			// MASTERCARD
			else if(category.equals("MASTERCARD"))
			{
				logger.info("********* In MASTERCARD ******");
				
				 result=false;
				try{
				String count_val="";
				String value=null;
				SimpleDateFormat sdf1 = new SimpleDateFormat("dd/mm/yyyy");
				SimpleDateFormat sdf2 = new SimpleDateFormat("mm/dd/yyyy");
				String date_val = sdf2.format(sdf1.parse(filedate));
				String concat=category+"_"+subcat;
				if(subcat.equals("ISSUER"))
				{
					logger.info("********* In ISSUER ******");
				String categ=category+"_"+subcat;
				String query="SELECT rec_set_id from MAIN_RECON_SEQUENCE WHERE  RECON_CATEGORY='"+concat+"' order by rec_set_id ASC";
				//int rec_id = getJdbcTemplate().queryForObject(query, new Object[] { category+"_"+subcat },Integer.class);
				logger.info("query=="+query);
				PreparedStatement pst=getConnection().prepareStatement(query);
				ResultSet rs=pst.executeQuery();
				
				while(rs.next())
				{
					value=rs.getString("rec_set_id");
					logger.info("value=="+value);
					if(value.equalsIgnoreCase("1"))
					{
					Mastercard_Iss1(categ, date_val,value);
					Mastercard_Iss_CD(categ, date_val,value);
					}
					else if(value.equalsIgnoreCase("2"))
					{
						Mastercard_Iss2(categ, date_val,value);
					}
					else if(value.equalsIgnoreCase("3"))
					{
						int val=Integer.parseInt(value)+1;
						value=Integer.toString(val);
						Mastercard_Iss3(categ, date_val,value);
					}
					
				}
				Mastercard_Recon_Settlement_iss(category, date_val);
				return true;
				}
				else if(subcat.equals("ACQUIRER"))
				{
					logger.info("********* In ACQUIRER ******");
					String categ=category+"_"+subcat;
					String query="SELECT rec_set_id from MAIN_RECON_SEQUENCE WHERE  RECON_CATEGORY='MASTERCARD_ACQUIRER' order by rec_set_id ASC";
					//int rec_id = getJdbcTemplate().queryForObject(query, new Object[] { category+"_"+subcat },Integer.class);
					logger.info("query=="+query);
					PreparedStatement pst=getConnection().prepareStatement(query);
					ResultSet rs=pst.executeQuery();
					
					while(rs.next())
					{
						value=rs.getString("rec_set_id");
						logger.info("value=="+value);
						if(value.equalsIgnoreCase("1"))
						{
							Mastercard_Acq1(categ, date_val,value);
						}
						else if(value.equalsIgnoreCase("2"))
						{
							Mastercard_Acq2(categ, date_val,value,dollar_val);
							//Mastercard_Recon_Settlement(category, date_val);
						}
						
					}
					Mastercard_Recon_Settlement_acq(category, date_val);
					return true;
				}
				
				/*String get_count="select count(*) as count from PROCEDURE_STATUS_TABLE   where to_char(filedate,'mm/dd/yyyy') = to_char(to_date('"+date_val+"','mm/dd/yyyy'),'mm/dd/yyyy')";
				PreparedStatement pst=getConnection().prepareStatement(get_count);
				ResultSet rs_new=pst.executeQuery();
				while(rs_new.next())
				{
					count_val=rs_new.getString("count");
					logger.info(count_val);
					int val=Integer.parseInt(count_val);
					if(val>=6)
					{
						Mastercard_Recon_Settlement(category, date_val);
					}
				}*/
				
			}catch(Exception e)
			{
				demo.logSQLException(e, "ReconProcessDaoImpl.compareFiles-MASTERCARD");
				logger.error(" error in  ReconProcessDaoImpl.compareFiles-MASTERCARD", new Exception(" ReconProcessDaoImpl.compareFiles-MASTERCARD",e));
				return false;
			}
			return true;	
			}
			
			else if(category.equals("NFS")) {
				
				logger.info("********* In NFS ******");
				if(subcat.equals("ISSUER")) {
					logger.info("********* In ISSUER ******");	
						result = ISSComparedata(category, subcat, filedate,compareBean.getStEntryBy() );
						
						
					} else if(subcat.equals("ACQUIRER")) {
						logger.info("********* In ACQUIRER ******");	
						result = AcqComparedata(category, subcat, filedate,compareBean.getStEntryBy() );
						
	
					}
				
				
			}
       else if(category.equals("CASHNET")) {
				
    	   logger.info("********* In CASHNET ******");
				if(subcat.equals("ISSUER")) {
					 logger.info("********* In ISSUER ******");
						result = cashnetISSComparedata(category, subcat, filedate,compareBean.getStEntryBy() );
						
						
					} else if(subcat.equals("ACQUIRER")) {
						 logger.info("********* In ACQUIRER ******");
						result = cashnetAcqComparedata(category, subcat, filedate,compareBean.getStEntryBy() );
						
	
					}
				
				
			}
			else
			{
				logger.info("********* In ELSE ******");

				List<Integer> rec_set_id;
				String stCategory;
				if(!compareBean.getStSubCategory().equals("-"))
				{
					stCategory = compareBean.getStCategory()+"_"+compareBean.getStSubCategory();
					compareBean.setStMergeCategory(compareBean.getStCategory()+"_"+compareBean.getStSubCategory().substring(0, 3));
					//compareBean.setStSub_Category_substr(compareBean.getStSubCategory().substring(0,3));
				}
				else
				{
					stCategory = compareBean.getStCategory();
					compareBean.setStMergeCategory(compareBean.getStCategory());
				}
				
			//	List<String> fileid= new ArrayList<String>(); 
				
				
				
				/*if(compareBean.getStSubCategory().equals("DOMESTIC") || compareBean.getStSubCategory().equals("ISSUER") )
				{
					 rec_set_id = compareRupayService.getRec_domesticset_id(stCategory);
				}
				else*/
				{
					 rec_set_id = compareRupayService.getRec_set_id(stCategory);
					 logger.info("rec_set_id=="+rec_set_id);
				}
				
				boolean updateEntry = false;
				//creating categories list
				List<String> categories = new ArrayList<>(); 
				//List<String> subCategory = new ArrayList<>();
				Set<String> tableName = new HashSet<>();
				Set<String> subcategory = new HashSet<>();
				for(int j = 0; j<rec_set_id.size(); j++ )
				{
					logger.info("****************************************************************** REC ID IS ************************ "+rec_set_id.get(j));
					//logger.info("****************************************************************** REC ID IS ************************ "+rec_set_id.get(j));
					if(j == 2)
					{
						compareBean.setStSubCategory("SURCHARGE");
						
						compareBean.setStMergeCategory(compareBean.getStCategory()+"_SUR");//+compareBean.getStSubCategory().substring(0, 3));
					}
					categories.add(compareBean.getStCategory());
				
					
					int inRec_Set_id = rec_set_id.get(j);
					//List<String> tables = compareRupayService.getTableName(inRec_Set_id,compareBean.getStCategory()+"_"+compareBean.getStSubCategory());
					List<List<String>> tables_data = compareRupayService.getTableName(inRec_Set_id,stCategory);
					 logger.info("tables_data=="+tables_data);
					List<String> tables = tables_data.get(0);
					List<String> tables_subcategories = tables_data.get(1);
					
					/*for(String subcate : tables_subcategories)
					{
						logger.info("table1 subcate is "+subcate);
					}
					*/
					CompareSetupBean setupBean = new CompareSetupBean();
					setupBean.setFileDate(filedate);
					setupBean.setCategory(compareBean.getStCategory());
					setupBean.setStSubCategory(compareBean.getStSubCategory());
					
					compareBean.setStTable1_SubCategory(tables_subcategories.get(0));
					compareBean.setStTable2_SubCategory(tables_subcategories.get(1));
					
			
					tableName.add(tables.get(0));
					tableName.add(tables.get(1));
					subcategory.add(compareBean.getStTable1_SubCategory());
					subcategory.add(compareBean.getStTable2_SubCategory());
					
					if(checkCompareStatus(filedate, compareBean.getStCategory(), compareBean.getStTable1_SubCategory(), compareBean.getStTable2_SubCategory(), tables))
					{
						updateEntry = true;
						
						//LOGIC FOR RUPAY MODULE
						int  i = compareRupayService.moveData(tables,compareBean,inRec_Set_id);
						
						
							//MOVE PREVIOUS DAY RECON RECORDS FOR MATCHED TABLES
							compareRupayService.getReconRecords(tables, compareBean, inRec_Set_id);
						
						
						//remove duplicate entries
						//compareRupayService.removeDuplicates(tables, compareBean, inRec_Set_id);
							
							//minakshi changes for ttum knockoff 26/06/2018
							boolean result1 = false;
							//if(inRec_Set_id == 2){
								if(inRec_Set_id == 2 && compareBean.getStCategory().equals("RUPAY") && compareBean.getStSubCategory().equals("DOMESTIC")){
								
								result1 = KnockoffTTUMdata(compareBean.getStCategory(), compareBean.getStSubCategory(), compareBean.getStFile_date(),inRec_Set_id );
								
								}
						//if(result1!=false){	

						if(i==1)
						{
							//ALTER THE MATCHED TABLE AND SETTLEMENT TABLE
							compareRupayService.alterMatchedandSettlementTables(compareBean,inRec_Set_id);
							if(compareBean.getStCategory().equalsIgnoreCase("RUPAY"))
							{
								 logger.info("---In Rupay---");
								compareRupayService.updateMatchedRecordsForRupay(tables, compareBean,inRec_Set_id);
							}
							else if(compareBean.getStCategory().equalsIgnoreCase("VISA"))
							{
								logger.info("---In VISA---");
								compareRupayService.updateMatchedRecordsForVisa(tables, compareBean,inRec_Set_id);
							}
							if(inRec_Set_id == 1)
							{
								//remove duplicate entries
								compareRupayService.removeDuplicates(tables, compareBean, inRec_Set_id);
							}
							
							//FOR VISA REMOVE DUPLICATE IN CYCLE 2
							if(compareBean.getStCategory().equalsIgnoreCase("VISA") && inRec_Set_id == 2)
							{
								compareRupayService.removeDuplicatesFromCycle2(tables, compareBean, inRec_Set_id);
							}
							compareRupayService.moveToRecon(tables,compareBean,inRec_Set_id);
							//CHANGES MADE BY INT5779 ON  ADDING RESPONSE CODE LOGIN AS PER MAN FILE
							if(j == 0)
							{
								compareRupayService.TTUMRecords(tables, compareBean, rec_set_id.get(j));
							}
							
							
							result= true;
						}
						else
						{
							return false;
						}
						
						//}
						
						
						//added by int5779
						
						/*List<String> categories = new ArrayList<>();
						categories.add(compareBean.getStTable1_SubCategory());
						categories.add(compareBean.getStTable2_SubCategory());*/
						/*updatereconstatus(setupBean,tables,categories);*/
					}
					
			}
				
				if(updateEntry)
				{
					CompareSetupBean setupbean = new CompareSetupBean();
					setupbean.setCategory(compareBean.getStCategory());
					setupbean.setFileDate(filedate);
					updateRupayreconstatus(setupbean, tableName, subcategory);
				}
				//updatereconstatus(setupBean,tables,categories);
				//truncate all tables created
				compareRupayService.CleanTables(compareBean);
				logger.info("*****DONE******");
			
			}
			logger.info("***** ReconProcessDaoImpl.compareFiles End ****");
		//	redirectAttributes.addFlashAttribute(SUCCESS_MSG, "Filteration Completed Successfully.");
			return result;
		}
		catch(Exception e)
		{
			//redirectAttributes.addFlashAttribute(ERROR_MSG, "Configuration already Exists.");
			demo.logSQLException(e, "ReconProcessDaoImpl.compareFiles");
			 logger.error(" error in  ReconProcessDaoImpl.compareFiles", new Exception(" ReconProcessDaoImpl.compareFiles",e));
			return false;
		}
		

		
	}

	public boolean KnockoffTTUMdata(String category,String subCat,String filedate,int rec_set_id) throws ParseException, Exception {
		try {
			logger.info("***** ReconProcessDaoImpl.KnockoffTTUMdata Start ****");
			String response = null;
			Map<String, Object> inParams = new HashMap<String, Object>();

			inParams.put("I_CATEGORY", category);
			inParams.put("I_SUBCATEGORY",subCat.substring(0, 3) );
			inParams.put("I_REC_SET_ID",rec_set_id );
			inParams.put("I_FILE_DATE",filedate);
		
			
			
			KnockoffTTUM knockoffTTUM = new KnockoffTTUM(getJdbcTemplate());
			Map<String, Object> outParams = knockoffTTUM.execute(inParams);

			//logger.info("outParams msg1"+outParams.get("msg1"));
			logger.info("***** ReconProcessDaoImpl.KnockoffTTUMdata End ****");
			
			if (outParams.get("ERROR_MESSAGE") != null) {
			

						return false;
					}else {
						
						return true;
					}
				

			
			
		} catch (Exception e) {
			demo.logSQLException(e, "ReconProcessDaoImpl.KnockoffTTUMdata");
			logger.error(" error in  ReconProcessDaoImpl.KnockoffTTUMdata", new Exception(" ReconProcessDaoImpl.KnockoffTTUMdata",e));
			return false;
		}
		
	}
	
	class KnockoffTTUM extends StoredProcedure {
		private static final String procName = "Rupay_TTUM_Knockoff_Proc";

		KnockoffTTUM(JdbcTemplate JdbcTemplate) {
			super(JdbcTemplate, procName);
			setFunction(false);
			
			
			declareParameter(new SqlParameter("I_FILE_DATE",OracleTypes.VARCHAR));
			declareParameter(new SqlParameter("I_CATEGORY",OracleTypes.VARCHAR));
			declareParameter(new SqlParameter("I_SUBCATEGORY",OracleTypes.VARCHAR));
			declareParameter(new SqlParameter("I_REC_SET_ID",OracleTypes.INTEGER));
			declareParameter(new SqlOutParameter("ERROR_CODE", OracleTypes.VARCHAR));
			declareParameter(new SqlOutParameter("ERROR_MESSAGE", OracleTypes.VARCHAR));
			compile();
		}
	}
	
	
	@Override
	public CompareSetupBean chkStatus(List<CompareSetupBean> compareSetupBeans,
			String category, String filedate) throws Exception {
		
		logger.info("***** ReconProcessDaoImpl.chkStatus Start ****");
		boolean upload_flag=false,Filter_flag=false,knockoff_flag= false, COMAPRE_FLAG=false;
		
		int upload =0,knockoff=0 ,compare=0,filter=0;
		CompareSetupBean bean = new CompareSetupBean();
		try{
		for(CompareSetupBean setupBean : compareSetupBeans){
			
			logger.info("fileid"+setupBean.getInFileId());
			
			logger.info("knockoff"+setupBean.getKnockoff_Flag());
			
			logger.info("filter"+setupBean.getFilter_Flag());
			
			
			if(getStatus("UPLOAD_FLAG", filedate, category, setupBean.getInFileId())>0) {
				
				upload++;
				
			}if(getStatus("COMAPRE_FLAG", filedate, category, setupBean.getInFileId())>0) {
				
				compare++;
				
			}
			if(setupBean.getKnockoff_Flag().equalsIgnoreCase("Y")){	
				
				if(getStatus("FILTER_FLAG", filedate, category, setupBean.getInFileId())>0) {
						
						filter++;	
						
					}
			}
			// added by int6345
			
			
			// end
			else {
				
				filter++;
				
			} if(setupBean.getKnockoff_Flag().equalsIgnoreCase("Y")){
			
				if(getStatus("KNOCKOFF_FLAG", filedate, category, setupBean.getInFileId())>0) {
					
					knockoff++ ;
					
				} 
			}else{
				
				knockoff++;
			}
		
		}
		
		
		logger.info(upload);
		logger.info(filter);
		logger.info(knockoff);
		logger.info(compare);
		if(upload==compareSetupBeans.size()) {
			
			bean.setUpload_Flag("Completed");
		} else{
			
			bean.setUpload_Flag("Pending");
		}
		if(filter==compareSetupBeans.size()) {
			
			bean.setFilter_Flag("Completed");
		} else{
			if(category.equals("MASTERCARD"))
			{
				bean.setFilter_Flag("Completed");
			}
			else{
			bean.setFilter_Flag("Pending");
			}
		}
		if(knockoff==compareSetupBeans.size()) {
			
			bean.setKnockoff_Flag("Completed");
		} else{
			
			if(category.equals("MASTERCARD"))
			{
				bean.setKnockoff_Flag("Completed");
			}
			else{
			bean.setKnockoff_Flag("Pending");
			}
		}if(compare==compareSetupBeans.size()) {
			
			bean.setComapre_Flag("Completed");
		} else{
			
			bean.setComapre_Flag("Pending");
		}
		
		logger.info("***** ReconProcessDaoImpl.chkStatus End ****");
		
		}catch(Exception e){
			demo.logSQLException(e, "ReconProcessDaoImpl.chkStatus");
			logger.error(" error in  ReconProcessDaoImpl.chkStatus", new Exception(" ReconProcessDaoImpl.chkStatus",e));
			throw e;
		}
	
		return bean;
	} 
	
	
	
	public int getStatus(String Flag,String filedate,String category,int fileid) throws Exception {
		logger.info("***** ReconProcessDaoImpl.getStatus Start ****");
		try {
		String query="Select count(*)  FROM MAIN_FILE_UPLOAD_DTLS  where category='"+category+"'"
				+ " and to_date(FILEDATE,'dd/mm/rrrr') = to_date('"+filedate+"','dd/mm/rrrr') and "
						+ " FILEID="+fileid+" and "+Flag+" = 'Y'";
		
		logger.info(query);
				
		logger.info("***** ReconProcessDaoImpl.getStatus End ****");
	
		
		return getJdbcTemplate().queryForObject(query, Integer.class);
		
		}catch(Exception ex){
			demo.logSQLException(ex, "ReconProcessDaoImpl.getStatus");
			logger.error(" error in  ReconProcessDaoImpl.getStatus", new Exception(" ReconProcessDaoImpl.getStatus",ex));
			//throw e;
			return 1;
			
		}
		
		
	}
	
	
	public boolean chkStatus(CompareSetupBean setupBean,List<String> tables) throws Exception {
		logger.info("***** ReconProcessDaoImpl.chkStatus Start ****");
		try{
		String query ="select FILEID from main_filesource where upper(filename) = '"+tables.get(0)+"' and FILE_CATEGORY='"
					+setupBean.getCategory()+"' and FILE_SUBCATEGORY='"+setupBean.getStSubCategory()+"'";
		
		logger.info("query=="+query);
		
		int fileid1=getJdbcTemplate().queryForObject(query, Integer.class);
		logger.info("fileid1=="+fileid1);
		
		 query ="select FILEID from main_filesource where upper(filename) = '"+tables.get(1)+"' and FILE_CATEGORY='"
				 	+setupBean.getCategory()+"' and FILE_SUBCATEGORY='"+setupBean.getStSubCategory()+"'";
		 logger.info("query=="+query);
		 
		int fileid2 =getJdbcTemplate().queryForObject(query, Integer.class);
		logger.info("fileid2=="+fileid2);
		
		String knockoffFlag1,FilterFlag1,KnockoffFlag2,filterflag2;
		
		FilterFlag1 = getJdbcTemplate().queryForObject("select FILTERATION from main_filesource where FILEID ="+fileid1+"  ",String.class );
		logger.info("FilterFlag1=="+FilterFlag1);
		
		knockoffFlag1= getJdbcTemplate().queryForObject("select KNOCKOFF from main_filesource where FILEID ="+fileid1+"  ",String.class );
		logger.info("knockoffFlag1=="+knockoffFlag1);
				
		filterflag2 = getJdbcTemplate().queryForObject("select FILTERATION from main_filesource where FILEID ="+fileid2+"  ",String.class );
		logger.info("filterflag2=="+filterflag2);
		
		KnockoffFlag2 = getJdbcTemplate().queryForObject("select KNOCKOFF from main_filesource where FILEID ="+fileid2+" ",String.class );
		logger.info("KnockoffFlag2=="+KnockoffFlag2);
		
	
		String sql="";
		int result1=0,result2=0;
		if(FilterFlag1.equalsIgnoreCase("Y")&&knockoffFlag1.equalsIgnoreCase("Y")){
			
			sql = "Select count(*) from MAIN_FILE_UPLOAD_DTLS where  FILEID = "+fileid1+" and Knockoff_FLAG='Y' AND Upload_FLAG = 'Y' and FILTER_FLAG = 'Y' and COMAPRE_FLAG='N' and  to_char(filedate,'dd/mm/yyyy') =  to_char(to_date('"+setupBean.getFileDate()+"','dd/mm/yyyy'),'dd/mm/yyyy')  ";			
			result1 = getJdbcTemplate().queryForObject(sql, Integer.class);
			
		}else {
		
			sql = "Select count(*) from MAIN_FILE_UPLOAD_DTLS where FILEID = "+fileid1+" and  Upload_FLAG = 'Y' and  COMAPRE_FLAG='N' and to_char(filedate,'dd/mm/yyyy') =  to_char(to_date('"+setupBean.getFileDate()+"','dd/mm/yyyy'),'dd/mm/yyyy')  ";
			result1 = getJdbcTemplate().queryForObject(sql, Integer.class);
		}
		logger.info("sql=="+sql);
		logger.info("result1=="+result1);
		
		if(filterflag2.equalsIgnoreCase("Y")&&KnockoffFlag2.equalsIgnoreCase("Y")){
			
			sql = "Select count(*) from MAIN_FILE_UPLOAD_DTLS where  FILEID = "+fileid2+" and Knockoff_FLAG='Y' AND Upload_FLAG = 'Y' and FILTER_FLAG = 'Y' and COMAPRE_FLAG='N' and to_char(filedate,'dd/mm/yyyy') =  to_char(to_date('"+setupBean.getFileDate()+"','dd/mm/yyyy'),'dd/mm/yyyy')  ";
			result2 = getJdbcTemplate().queryForObject(sql, Integer.class);
			
		}else {
		
			sql = "Select count(*) from MAIN_FILE_UPLOAD_DTLS where FILEID = "+fileid2+" and  Upload_FLAG = 'Y' and  COMAPRE_FLAG='N' and to_char(filedate,'dd/mm/yyyy') =  to_char(to_date('"+setupBean.getFileDate()+"','dd/mm/yyyy'),'dd/mm/yyyy')  ";
			result2 = getJdbcTemplate().queryForObject(sql, Integer.class);
			
		}
		logger.info("sql=="+sql);
		logger.info("result2=="+result2);
		
		logger.info("***** ReconProcessDaoImpl.chkStatus end ****");
		
		if(result1>0 && result2>0) {
			
			return true;
			
		}else {
			
			return false;
		}
		
	}catch(Exception e){
		demo.logSQLException(e, "ReconProcessDaoImpl.chkStatus");
		logger.error(" error in  ReconProcessDaoImpl.chkStatus", new Exception(" ReconProcessDaoImpl.chkStatus",e));
		throw e;
	}
	}
	
public boolean checkCompareStatus(String stFileDate,String stCategory ,String stTable1_Subcat,String stTable2_cat,List<String>tables ) throws Exception {
		
	logger.info("***** ReconProcessDaoImpl.checkCompareStatus Start ****");
	
	try{
		String query ="select FILEID from main_filesource where upper(filename) = '"+tables.get(0)+"' and FILE_CATEGORY='"+stCategory+"' and FILE_SUBCATEGORY='"+stTable1_Subcat+"'";
		logger.info("query=="+query);
		int fileid1=getJdbcTemplate().queryForObject(query, Integer.class);
		logger.info("fileid1=="+fileid1);
		 query ="select FILEID from main_filesource where upper(filename) = '"+tables.get(1)+"' and FILE_CATEGORY='"+stCategory+"' and FILE_SUBCATEGORY='"+stTable2_cat+"'";
		 logger.info("query=="+query);
		int fileid2 =getJdbcTemplate().queryForObject(query, Integer.class);
		logger.info("fileid2=="+fileid2);
		String knockoffFlag1,FilterFlag1,KnockoffFlag2,filterflag2;
		
		FilterFlag1 = getJdbcTemplate().queryForObject("select FILTERATION from main_filesource where FILEID ="+fileid1+"  ",String.class );
		logger.info("FilterFlag1=="+FilterFlag1);
		knockoffFlag1= getJdbcTemplate().queryForObject("select KNOCKOFF from main_filesource where FILEID ="+fileid1+"  ",String.class );
		logger.info("knockoffFlag1=="+knockoffFlag1);
		
		filterflag2 = getJdbcTemplate().queryForObject("select FILTERATION from main_filesource where FILEID ="+fileid2+"  ",String.class );
		logger.info("filterflag2=="+filterflag2);
		KnockoffFlag2 = getJdbcTemplate().queryForObject("select KNOCKOFF from main_filesource where FILEID ="+fileid2+" ",String.class );
		logger.info("KnockoffFlag2=="+KnockoffFlag2);
		
	
		String sql="";
		int result1=0,result2=0;
		if(FilterFlag1.equalsIgnoreCase("Y")&&knockoffFlag1.equalsIgnoreCase("Y")){
			
			sql = "Select count(*) from MAIN_FILE_UPLOAD_DTLS where  FILEID = "+fileid1+" and Knockoff_FLAG='Y' AND Upload_FLAG = 'Y' and FILTER_FLAG = 'Y' and COMAPRE_FLAG='N' " +
					"and  to_char(filedate,'dd/mm/yyyy') =  to_char(to_date('"+stFileDate+"','dd/mm/yyyy'),'dd/mm/yyyy')  ";
			
			
			result1 = getJdbcTemplate().queryForObject(sql, Integer.class);
			
		}else {
		
			sql = "Select count(*) from MAIN_FILE_UPLOAD_DTLS where FILEID = "+fileid1+" and  Upload_FLAG = 'Y' and  COMAPRE_FLAG='N' and to_char(filedate,'dd/mm/yyyy') =  to_char(to_date('"
					+stFileDate+"','dd/mm/yyyy'),'dd/mm/yyyy')  ";
			result1 = getJdbcTemplate().queryForObject(sql, Integer.class);
		}
		logger.info("sql=="+sql);
		logger.info("result1=="+result1);
		
		if(filterflag2.equalsIgnoreCase("Y")&&KnockoffFlag2.equalsIgnoreCase("Y")){
			
			sql = "Select count(*) from MAIN_FILE_UPLOAD_DTLS where  FILEID = "+fileid2+" and Knockoff_FLAG='Y' AND Upload_FLAG = 'Y' and FILTER_FLAG = 'Y' and COMAPRE_FLAG='N'" +
					" and to_char(filedate,'dd/mm/yyyy') =  to_char(to_date('"+stFileDate+"','dd/mm/yyyy'),'dd/mm/yyyy')  ";
			result2 = getJdbcTemplate().queryForObject(sql, Integer.class);
			
		}else {
		
			sql = "Select count(*) from MAIN_FILE_UPLOAD_DTLS where FILEID = "+fileid2+" and  Upload_FLAG = 'Y' and  COMAPRE_FLAG='N' and to_char(filedate,'dd/mm/yyyy') =  to_char(to_date('"
					+stFileDate+"','dd/mm/yyyy'),'dd/mm/yyyy')  ";
			result2 = getJdbcTemplate().queryForObject(sql, Integer.class);
			
		}
		logger.info("sql=="+sql);
		logger.info("result2=="+result2);
		
		logger.info("***** ReconProcessDaoImpl.checkCompareStatus End ****");
		
		if(result1>0 && result2>0) {
			
			return true;
			
		}else {
			
			return false;
		}
	}catch(Exception e){
		demo.logSQLException(e, "ReconProcessDaoImpl.checkCompareStatus");
		logger.error(" error in  ReconProcessDaoImpl.checkCompareStatus", new Exception(" ReconProcessDaoImpl.checkCompareStatus",e));
		throw e;
	}
	
	}
	
	
	public boolean updatereconstatus(CompareSetupBean setupBean,List<String>tables,List<String> categories) throws Exception {
		logger.info("***** ReconProcessDaoImpl.updatereconstatus Start ****");
		try{
			
			for (int i = 0; i < tables.size(); i++) {
				
							
				String query ="select FILEID from main_filesource where upper(filename) = '"+tables.get(i)+"' and FILE_CATEGORY='"+setupBean.getCategory()+"' and FILE_SUBCATEGORY='"
						+categories.get(i)+"'";
				logger.info("query=="+query);
				
				int fileid1=getJdbcTemplate().queryForObject(query, Integer.class);
				logger.info("fileid1=="+fileid1);
				
				setupBean.setInFileId(fileid1);
				/*if(setupBean.getCategory().equals("ONUS") || setupBean.getCategory().equals("AMEX"))
				{*/
					icompareConfigService.updateFlag("MANUALCOMPARE_FLAG", setupBean);
					icompareConfigService.updateFlag("COMAPRE_FLAG", setupBean);
			/*	}
				else
					icompareConfigService.updateFlag("COMAPRE_FLAG", setupBean);
			*/	
				
				
				
			}
			logger.info("***** ReconProcessDaoImpl.updatereconstatus End ****");
		
		return true;
		
		}catch (Exception ex) {
			demo.logSQLException(ex, "ReconProcessDaoImpl.updatereconstatus");
			 logger.error(" error in  ReconProcessDaoImpl.updatereconstatus", new Exception(" ReconProcessDaoImpl.updatereconstatus",ex));
			
			return false;
		}
		
		
		
		
	}
	
public boolean updateRupayreconstatus(CompareSetupBean setupBean,Set<String> tables,Set<String> subCategory) throws Exception {
	logger.info("***** ReconProcessDaoImpl.updateRupayreconstatus Start ****");
		try{
			
			  for(String fileName : tables)
			  {
				  for(String stSubCat : subCategory)
				  {
					  try
					  {
						  if(fileName.equals("RUPAY") && stSubCat.equals("SURCHARGE")&& setupBean.getCategory().equals("RUPAY")){
							  
							  logger.info("IN RUPAY-SURCHARGE");
						  }else  if(fileName.equals("SWITCH") && stSubCat.equals("SURCHARGE") && setupBean.getCategory().equals("RUPAY")){
							  
							  logger.info("IN RUPAY-SURCHARGE");
						  }else if(fileName.equals("VISA") && stSubCat.equals("SURCHARGE")&& setupBean.getCategory().equals("VISA")){
							  
							  logger.info("IN RUPAY-SURCHARGE");
						  }else  if(fileName.equals("SWITCH") && stSubCat.equals("SURCHARGE") && setupBean.getCategory().equals("VISA")){
							  
							  logger.info("IN RUPAY-SURCHARGE");
						  }else {
						  String query ="select FILEID from main_filesource where upper(filename) = '"+fileName+"' and FILE_CATEGORY='"+setupBean.getCategory()+"' and FILE_SUBCATEGORY='"
								  +stSubCat+"'";
						  logger.info("query=="+query);
						  int fileid1=getJdbcTemplate().queryForObject(query, Integer.class);
						  logger.info("fileid1=="+fileid1);
						  setupBean.setInFileId(fileid1);
						 icompareConfigService.updateFlag("COMAPRE_FLAG", setupBean);
						 //ADDED BY INT5779 AS ON 12TH MARCH FOR MERGING MAN FILE CODE
						 icompareConfigService.updateFlag("MANUALCOMPARE_FLAG", setupBean);
						  }
					  }
					  catch(Exception e)
					  {
						  demo.logSQLException(e, "ReconProcessDaoImpl.updateRupayreconstatus");
						  logger.error(" error in ReconProcessDaoImpl.updateRupayreconstatus", new Exception("ReconProcessDaoImpl.updateRupayreconstatus",e));
						  throw e;
					  }
				  }
				  
				  
			  }
			
			/*for (int i = 0; i < tables.size(); i++) {
				
							
				String query ="select FILEID from main_filesource where upper(filename) = '"+tables.get(i)+"' and FILE_CATEGORY='"+setupBean.getCategory()+"' and FILE_SUBCATEGORY='"
						+categories.get(i)+"'";
				int fileid1=getJdbcTemplate().queryForObject(query, Integer.class);
				
				
				setupBean.setInFileId(fileid1);
				icompareConfigService.updateFlag("COMAPRE_FLAG", setupBean);
				
				
				
				
			}*/
			  logger.info("***** ReconProcessDaoImpl.updateRupayreconstatus End ****");
		
		return true;
		
		}catch (Exception ex) {
			 demo.logSQLException(ex, "ReconProcessDaoImpl.updateRupayreconstatus");
			logger.error(" error in ReconProcessDaoImpl.updateRupayreconstatus", new Exception("ReconProcessDaoImpl.updateRupayreconstatus",ex));
			
			return false;
		}
		
		
		
		
	}
	
// added for mastercard and cardtpcard on 16_03_2018

public boolean Mastercard_Iss1(String categ, String filedate,String value) throws ParseException, Exception {
	try {
		logger.info("***** ReconProcessDaoImpl.Mastercard_Iss1 Start ****");
		//boolean resp=false;
		Map<String, Object> inParams = new HashMap<String, Object>();

		inParams.put("category_name", categ);
		inParams.put("date_val", filedate);
		inParams.put("rec_set_id", value);
		
		MasterCard_proc1 cbrmatching = new MasterCard_proc1(getJdbcTemplate());
		Map<String, Object> outParams = cbrmatching.execute(inParams);
		
		logger.info("outParams Msg=="+outParams.get("msg1") );
		logger.info("***** ReconProcessDaoImpl.Mastercard_Iss1 End ****");
		
		if (outParams.get("msg1") != null) {
			
			return true;
		}
		else{
			return false;
		}
		
	} catch (Exception e) {
		demo.logSQLException(e, "ReconProcessDaoImpl.Mastercard_Iss1");
		 logger.error(" error in  ReconProcessDaoImpl.Mastercard_Iss1", new Exception(" ReconProcessDaoImpl.Mastercard_Iss1",e));
		return false;
	}
	
	
}

//s

// CARDTOCARD

public boolean CardtoCard(String categ, String filedate,String value) throws ParseException, Exception {
	try {
		logger.info("***** ReconProcessDaoImpl.CardtoCard Start ****");
		//boolean resp=false;
		Map<String, Object> inParams = new HashMap<String, Object>();

		inParams.put("category_name", categ);
		inParams.put("date_val", filedate);
		inParams.put("rec_set_id", value);
		
		CardtoCard_proc1 cbrmatching = new CardtoCard_proc1(getJdbcTemplate());
		Map<String, Object> outParams = cbrmatching.execute(inParams);
		
		logger.info("outParams Msg=="+outParams.get("msg1") );
		logger.info("***** ReconProcessDaoImpl.CardtoCard End ****");
		
		if (outParams.get("msg1") != null) {
			
			return true;
		}
		else{
			return false;
		}
		
	} catch (Exception e) {
		demo.logSQLException(e, "ReconProcessDaoImpl.CardtoCard");
		logger.error(" error in  ReconProcessDaoImpl.CardtoCard", new Exception(" ReconProcessDaoImpl.CardtoCard",e));
		return false;
	}
	
	
}
// Onus_Pos

public boolean Onus_Pos_Cycle1(String categ, String filedate,String value) throws ParseException, Exception {
	try {
		logger.info("***** ReconProcessDaoImpl.Onus_Pos_Cycle1 Start ****");
		//boolean resp=false;
		Map<String, Object> inParams = new HashMap<String, Object>();

		inParams.put("category_name", categ);
		inParams.put("date_val", filedate);
		inParams.put("rec_set_id", value);
		
		pos_onus_cycle1 cbrmatching = new pos_onus_cycle1(getJdbcTemplate());
		Map<String, Object> outParams = cbrmatching.execute(inParams);
		
		logger.info("outParams Msg=="+outParams.get("msg1") );
		logger.info("***** ReconProcessDaoImpl.Onus_Pos_Cycle1 End ****");
		
		if (outParams.get("msg1") != null) {
			
			return true;
		}
		else{
			return false;
		}
		
	} catch (Exception e) {
		demo.logSQLException(e, "ReconProcessDaoImpl.Onus_Pos_Cycle1");
		logger.error(" error in  ReconProcessDaoImpl.Onus_Pos_Cycle1", new Exception(" ReconProcessDaoImpl.Onus_Pos_Cycle1",e));
		return false;
	}
	
	
}
public boolean Onus_Pos_Cycle2(String categ, String filedate,String value) throws ParseException, Exception {
	try {
		logger.info("***** ReconProcessDaoImpl.Onus_Pos_Cycle2 Start ****");
		//boolean resp=false;
		Map<String, Object> inParams = new HashMap<String, Object>();

		inParams.put("category_name", categ);
		inParams.put("date_val", filedate);
		inParams.put("rec_set_id", value);
		
		pos_onus_cycle2 cbrmatching = new pos_onus_cycle2(getJdbcTemplate());
		Map<String, Object> outParams = cbrmatching.execute(inParams);
		
		logger.info("outParams Msg=="+outParams.get("msg1") );
		logger.info("***** ReconProcessDaoImpl.Onus_Pos_Cycle2 End ****");
		if (outParams.get("msg1") != null) {
			
			return true;
		}
		else{
			return false;
		}
		
	} catch (Exception e) {
		demo.logSQLException(e, "ReconProcessDaoImpl.Onus_Pos_Cycle2");
		logger.error(" error in  ReconProcessDaoImpl.Onus_Pos_Cycle2", new Exception(" ReconProcessDaoImpl.Onus_Pos_Cycle2",e));
		return false;
	}
	
	
}
public boolean Onus_Pos_Cycle3(String categ, String filedate,String value) throws ParseException, Exception {
	try {
		logger.info("***** ReconProcessDaoImpl.Onus_Pos_Cycle3 Start ****");
		//boolean resp=false;
		Map<String, Object> inParams = new HashMap<String, Object>();

		inParams.put("category_name", categ);
		inParams.put("date_val", filedate);
		inParams.put("rec_set_id", value);
		
		pos_onus_cycle3 cbrmatching = new pos_onus_cycle3(getJdbcTemplate());
		Map<String, Object> outParams = cbrmatching.execute(inParams);
		
		logger.info("outParams Msg=="+outParams.get("msg1") );
		logger.info("***** ReconProcessDaoImpl.Onus_Pos_Cycle3 End ****");
		if (outParams.get("msg1") != null) {
			
			return true;
		}
		else{
			return false;
		}
		
	} catch (Exception e) {
		demo.logSQLException(e, "ReconProcessDaoImpl.Onus_Pos_Cycle3");
		logger.error(" error in  ReconProcessDaoImpl.Onus_Pos_Cycle3", new Exception(" ReconProcessDaoImpl.Onus_Pos_Cycle3",e));
		return false;
	}
	
	
}

public boolean Onus_Pos_Settlment(String categ, String filedate) throws ParseException, Exception {
	try {
		logger.info("***** ReconProcessDaoImpl.Onus_Pos_Settlment Start ****");
		//boolean resp=false;
		Map<String, Object> inParams = new HashMap<String, Object>();

		inParams.put("category_name", categ);
		inParams.put("date_val", filedate);
		//inParams.put("rec_set_id", value);
		
		onus_pos_settlmnt cbrmatching = new onus_pos_settlmnt(getJdbcTemplate());
		Map<String, Object> outParams = cbrmatching.execute(inParams);
		
		logger.info("outParams Msg=="+outParams.get("msg1") );
		logger.info("***** ReconProcessDaoImpl.Onus_Pos_Settlment End ****");
		if (outParams.get("msg1") != null) {
			
			return true;
		}
		else{
			return false;
		}
		
	} catch (Exception e) {
		demo.logSQLException(e, "ReconProcessDaoImpl.Onus_Pos_Settlment");
		logger.error(" error in  ReconProcessDaoImpl.Onus_Pos_Settlment", new Exception(" ReconProcessDaoImpl.Onus_Pos_Settlment",e));
		return false;
	}
	
	
}

public boolean Mastercard_Iss_CD(String categ, String filedate,String value) throws ParseException, Exception {
	try {
		logger.info("***** ReconProcessDaoImpl.Mastercard_Iss_CD Start ****");
		//boolean resp=false;
		Map<String, Object> inParams = new HashMap<String, Object>();

		inParams.put("category_name", categ);
		inParams.put("date_val", filedate);
		
		MasterCard_proc_CD cbrmatching = new MasterCard_proc_CD(getJdbcTemplate());
		Map<String, Object> outParams = cbrmatching.execute(inParams);
		
		logger.info("outParams Msg=="+outParams.get("msg1") );
		logger.info("***** ReconProcessDaoImpl.Mastercard_Iss_CD End ****");
		
		if (outParams.get("msg1") != null) {
			
			return true;
		}
		else{
			return false;
		}
		
	} catch (Exception e) {
		demo.logSQLException(e, "ReconProcessDaoImpl.Mastercard_Iss_CD");
		logger.error(" error in  ReconProcessDaoImpl.Mastercard_Iss_CD", new Exception(" ReconProcessDaoImpl.Mastercard_Iss_CD",e));
		return false;
	}
	
	
}


public boolean CardtoCard_settle(String categ, String filedate) throws ParseException, Exception {
	try {
		
		logger.info("***** ReconProcessDaoImpl.CardtoCard_settle Start ****");
		Map<String, Object> inParams = new HashMap<String, Object>();

		inParams.put("category_name", categ);
		inParams.put("date_val", filedate);
		
		CardtoCard_set cbrmatching = new CardtoCard_set(getJdbcTemplate());
		Map<String, Object> outParams = cbrmatching.execute(inParams);
		logger.info("outParams msg1"+outParams.get("msg1"));
		logger.info("***** ReconProcessDaoImpl.CardtoCard_settle End ****");
		
		if (outParams.get("msg1") != null) {
			
			return true;
		}
		else{
			return false;
		}
		
	} catch (Exception e) {
		demo.logSQLException(e, "ReconProcessDaoImpl.CardtoCard_settle");
		logger.error(" error in  ReconProcessDaoImpl.CardtoCard_settle", new Exception(" ReconProcessDaoImpl.CardtoCard_settle",e));
		return false;
	}
	
	
}

public boolean Mastercard_Acq1(String categ, String filedate,String value) throws ParseException, Exception {
	try {
		logger.info("***** ReconProcessDaoImpl.Mastercard_Acq1 Start ****");
		//boolean resp=false;
		Map<String, Object> inParams = new HashMap<String, Object>();

		inParams.put("category_name", categ);
		inParams.put("date_val", filedate);
		inParams.put("rec_set_id", value);
		
		MasterCard_proc_Acq cbrmatching = new MasterCard_proc_Acq(getJdbcTemplate());
		Map<String, Object> outParams = cbrmatching.execute(inParams);
		
		logger.info("outParams msg1"+outParams.get("msg1"));
		logger.info("***** ReconProcessDaoImpl.Mastercard_Acq1 End ****");
		
		if (outParams.get("msg1") != null) {
			
			return true;
		}
		else{
			return false;
		}
		
	} catch (Exception e) {
		demo.logSQLException(e, "ReconProcessDaoImpl.Mastercard_Acq1");
		logger.error(" error in  ReconProcessDaoImpl.Mastercard_Acq1", new Exception(" ReconProcessDaoImpl.Mastercard_Acq1",e));
		return false;
	}
	
	
}

public boolean Mastercard_Acq2(String categ, String filedate,String value,String dollar_val) throws ParseException, Exception {
	try {
		logger.info("***** ReconProcessDaoImpl.Mastercard_Acq2 Start ****");
		//boolean resp=false;
		Map<String, Object> inParams = new HashMap<String, Object>();

		inParams.put("category_name", categ);
		inParams.put("date_val", filedate);
		inParams.put("rec_set_id", value);
		inParams.put("dollar_val", dollar_val);
		
		MasterCard_proc_Acq2 cbrmatching = new MasterCard_proc_Acq2(getJdbcTemplate());
		Map<String, Object> outParams = cbrmatching.execute(inParams);
		
		logger.info("outParams msg1"+outParams.get("msg1"));
		logger.info("***** ReconProcessDaoImpl.Mastercard_Acq2 End ****");
		
		if (outParams.get("msg1") != null) {
			
			return true;
		}
		else{
			return false;
		}
		
	} catch (Exception e) {
		demo.logSQLException(e, "ReconProcessDaoImpl.Mastercard_Acq2");
		logger.error(" error in  ReconProcessDaoImpl.Mastercard_Acq2", new Exception(" ReconProcessDaoImpl.Mastercard_Acq2",e));
		return false;
	}
	
	
}

// For recon Settlement

public boolean Mastercard_Recon_Settlement_iss(String categ, String filedate) throws ParseException, Exception {
	try {
		logger.info("***** ReconProcessDaoImpl.Mastercard_Recon_Settlement_iss Start ****");
		//boolean resp=false;
		Map<String, Object> inParams = new HashMap<String, Object>();

		inParams.put("category_name", categ);
		inParams.put("date_val", filedate);
		
		MasterCard_recon_sett_pro cbrmatching = new MasterCard_recon_sett_pro(getJdbcTemplate());
		Map<String, Object> outParams = cbrmatching.execute(inParams);
		
		logger.info("outParams msg1"+outParams.get("msg1"));
		logger.info("***** ReconProcessDaoImpl.Mastercard_Recon_Settlement_iss End ****");
		
		if (outParams.get("msg1") != null) {
			
			return true;
		}
		else{
			return false;
		}
		
	} catch (Exception e) {
		demo.logSQLException(e, "ReconProcessDaoImpl.Mastercard_Recon_Settlement_iss");
		logger.error(" error in  ReconProcessDaoImpl.Mastercard_Recon_Settlement_iss", new Exception(" ReconProcessDaoImpl.Mastercard_Recon_Settlement_iss",e));
		return false;
	}
	
	
}

public boolean Mastercard_Recon_Settlement_acq(String categ, String filedate) throws ParseException, Exception {
	try {
		logger.info("***** ReconProcessDaoImpl.Mastercard_Recon_Settlement_acq Start ****");
		//boolean resp=false;
		Map<String, Object> inParams = new HashMap<String, Object>();

		inParams.put("category_name", categ);
		inParams.put("date_val", filedate);
		
		MasterCard_recon_sett_pro1 cbrmatching = new MasterCard_recon_sett_pro1(getJdbcTemplate());
		Map<String, Object> outParams = cbrmatching.execute(inParams);
		
		logger.info("outParams msg1"+outParams.get("msg1"));
		logger.info("***** ReconProcessDaoImpl.Mastercard_Recon_Settlement_acq End ****");
		
		if (outParams.get("msg1") != null) {
			
			return true;
		}
		else{
			return false;
		}
		
	} catch (Exception e) {
		demo.logSQLException(e, "ReconProcessDaoImpl.Mastercard_Recon_Settlement_acq");
		logger.error(" error in  ReconProcessDaoImpl.Mastercard_Recon_Settlement_acq", new Exception(" ReconProcessDaoImpl.Mastercard_Recon_Settlement_acq",e));
		return false;
	}
}
public boolean Mastercard_Iss2(String categ, String filedate,String value) throws ParseException, Exception {
	try {
		logger.info("***** ReconProcessDaoImpl.Mastercard_Iss2 Start ****");
		//boolean resp=false;
		Map<String, Object> inParams = new HashMap<String, Object>();

		inParams.put("category_name", categ);
		inParams.put("date_val", filedate);
		inParams.put("rec_set_id", value);
		
		MasterCard_proc2 cbrmatching = new MasterCard_proc2(getJdbcTemplate());
		Map<String, Object> outParams = cbrmatching.execute(inParams);
		
		logger.info("outParams msg1"+outParams.get("msg1"));
		logger.info("***** ReconProcessDaoImpl.Mastercard_Iss2 End ****");
		
		if (outParams.get("msg1") != null) {
			
			return true;
		}
		else{
			return false;
		}
		
	} catch (Exception e) {
		demo.logSQLException(e, "ReconProcessDaoImpl.Mastercard_Iss2");
		logger.error(" error in  ReconProcessDaoImpl.Mastercard_Iss2", new Exception(" ReconProcessDaoImpl.Mastercard_Iss2",e));
		//logger.error(e.getMessage());
		return false;
	}
	
	
}

// call auto-reversal

public boolean Mastercard_Acq_auto_rev(String categ, String filedate) throws ParseException, Exception {
	try {
		logger.info("***** ReconProcessDaoImpl.Mastercard_Acq_auto_rev Start ****");
		//boolean resp=false;
		Map<String, Object> inParams = new HashMap<String, Object>();

		inParams.put("category_name", categ);
		inParams.put("date_val", filedate);
		//inParams.put("rec_set_id", value);
		
		MasterCard_proc_Acq_auto_rev cbrmatching = new MasterCard_proc_Acq_auto_rev(getJdbcTemplate());
		Map<String, Object> outParams = cbrmatching.execute(inParams);
		
		logger.info("outParams msg1"+outParams.get("msg1"));
		logger.info("***** ReconProcessDaoImpl.Mastercard_Acq_auto_rev End ****");
		
		if (outParams.get("msg1") != null) {
			
			return true;
		}
		else{
			return false;
		}
		
	} catch (Exception e) {
		demo.logSQLException(e, "ReconProcessDaoImpl.Mastercard_Acq_auto_rev");
		logger.error(" error in  ReconProcessDaoImpl.Mastercard_Acq_auto_rev", new Exception(" ReconProcessDaoImpl.Mastercard_Acq_auto_rev",e));
		return false;
	}
	
	
}


// man_file_process


public boolean Mastercard_man_file_process(String categ, String filedate) throws ParseException, Exception {
	try {
		logger.info("***** ReconProcessDaoImpl.Mastercard_man_file_process Start ****");
		//boolean resp=false;
		Map<String, Object> inParams = new HashMap<String, Object>();

		inParams.put("category_name", categ);
		inParams.put("date_val", filedate);
		//inParams.put("rec_set_id", value);
		
		MasterCard_proc_man_file cbrmatching = new MasterCard_proc_man_file(getJdbcTemplate());
		Map<String, Object> outParams = cbrmatching.execute(inParams);
		
		logger.info("outParams msg1"+outParams.get("msg1"));
		logger.info("***** ReconProcessDaoImpl.Mastercard_man_file_process End ****");
		
		if (outParams.get("msg1") != null) {
			
			return true;
		}
		else{
			return false;
		}
		
	} catch (Exception e) {
		demo.logSQLException(e, "ReconProcessDaoImpl.Mastercard_man_file_process");
		logger.error(" error in  ReconProcessDaoImpl.Mastercard_man_file_process", new Exception(" ReconProcessDaoImpl.Mastercard_man_file_process",e));
		return false;
	}
	
	
}


public boolean Mastercard_man_file_process1(String categ, String filedate) throws ParseException, Exception {
	try {
		logger.info("***** ReconProcessDaoImpl.Mastercard_man_file_process1 Start ****");
		//boolean resp=false;
		Map<String, Object> inParams = new HashMap<String, Object>();

		inParams.put("category_name", categ);
		inParams.put("date_val", filedate);
		//inParams.put("rec_set_id", value);
		
		MasterCard_proc_man_file1 cbrmatching = new MasterCard_proc_man_file1(getJdbcTemplate());
		Map<String, Object> outParams = cbrmatching.execute(inParams);
		
		logger.info("outParams msg1"+outParams.get("msg1"));
		logger.info("***** ReconProcessDaoImpl.Mastercard_man_file_process1 End ****");
		
		if (outParams.get("msg1") != null) {
			
			return true;
		}
		else{
			return false;
		}
		
	} catch (Exception e) {
		demo.logSQLException(e, "ReconProcessDaoImpl.Mastercard_man_file_process1");
		logger.error(" error in  ReconProcessDaoImpl.Mastercard_man_file_process1", new Exception(" ReconProcessDaoImpl.Mastercard_man_file_process1",e));
		return false;
	}
	
	
}

public boolean Mastercard_Iss_auto_rev(String categ, String filedate) throws ParseException, Exception {
	try {
		logger.info("***** ReconProcessDaoImpl.Mastercard_Iss_auto_rev Start ****");
		//boolean resp=false;
		Map<String, Object> inParams = new HashMap<String, Object>();

		inParams.put("category_name", categ);
		inParams.put("date_val", filedate);
		//inParams.put("rec_set_id", value);
		
		MasterCard_proc_Iss_auto_rev cbrmatching = new MasterCard_proc_Iss_auto_rev(getJdbcTemplate());
		Map<String, Object> outParams = cbrmatching.execute(inParams);
		
		logger.info("outParams msg1"+outParams.get("msg1"));
		logger.info("***** ReconProcessDaoImpl.Mastercard_Iss_auto_rev End ****");
		
		if (outParams.get("msg1") != null) {
			
			return true;
		}
		else{
			return false;
		}
		
	} catch (Exception e) {
		demo.logSQLException(e, "ReconProcessDaoImpl.Mastercard_Iss_auto_rev");
		logger.error(" error in  ReconProcessDaoImpl.Mastercard_Iss_auto_rev", new Exception(" ReconProcessDaoImpl.Mastercard_Iss_auto_rev",e));
		return false;
	}
	
	
}

private class MasterCard_proc2 extends StoredProcedure {
	private static final String procName = "recon_switch_mastercrd";

	MasterCard_proc2(JdbcTemplate JdbcTemplate) {
		super(JdbcTemplate, procName);
		setFunction(false);
		
		
		declareParameter(new SqlParameter("category_name",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("date_val",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("rec_set_id",OracleTypes.VARCHAR));
		declareParameter(new SqlOutParameter("msg1", OracleTypes.VARCHAR));
		
		compile();
	}
}

public boolean Mastercard_Iss3(String categ, String filedate,String value) throws ParseException, Exception {
	try {
		logger.info("***** ReconProcessDaoImpl.Mastercard_Iss3 Start ****");
		//boolean resp=false;
		Map<String, Object> inParams = new HashMap<String, Object>();

		inParams.put("category_name", categ);
		inParams.put("date_val", filedate);
		inParams.put("rec_set_id", value);
		
		MasterCard_proc3 cbrmatching = new MasterCard_proc3(getJdbcTemplate());
		Map<String, Object> outParams = cbrmatching.execute(inParams);
		
		logger.info("outParams msg1"+outParams.get("msg1"));
		logger.info("***** ReconProcessDaoImpl.Mastercard_Iss3 End ****");
		
		if (outParams.get("msg1") != null) {
			
			return true;
		}
		else{
			return false;
		}
		
	} catch (Exception e) {
		demo.logSQLException(e, "ReconProcessDaoImpl.Mastercard_Iss3");
		logger.error(" error in  ReconProcessDaoImpl.Mastercard_Iss3", new Exception(" ReconProcessDaoImpl.Mastercard_Iss3",e));
		return false;
	}
	
	
}


private class MasterCard_proc3 extends StoredProcedure {
	private static final String procName = "recon_mastercrd_surcharge";

	MasterCard_proc3(JdbcTemplate JdbcTemplate) {
		super(JdbcTemplate, procName);
		setFunction(false);
		
		
		declareParameter(new SqlParameter("category_name",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("date_val",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("rec_set_id",OracleTypes.VARCHAR));
		declareParameter(new SqlOutParameter("msg1", OracleTypes.VARCHAR));
		
		compile();
	}
}



private class MasterCard_proc1 extends StoredProcedure {
	private static final String procName = "recon_switch_cbs";

	MasterCard_proc1(JdbcTemplate JdbcTemplate) {
		super(JdbcTemplate, procName);
		setFunction(false);
		
		
		declareParameter(new SqlParameter("category_name",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("date_val",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("rec_set_id",OracleTypes.VARCHAR));
		declareParameter(new SqlOutParameter("msg1", OracleTypes.VARCHAR));
		
		compile();
	}
}

private class CardtoCard_proc1 extends StoredProcedure {
	private static final String procName = "card_to_card";

	CardtoCard_proc1(JdbcTemplate JdbcTemplate) {
		super(JdbcTemplate, procName);
		setFunction(false);
		
		
		declareParameter(new SqlParameter("category_name",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("date_val",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("rec_set_id",OracleTypes.VARCHAR));
		declareParameter(new SqlOutParameter("msg1", OracleTypes.VARCHAR));
		
		compile();
	}
}

private class pos_onus_cycle1 extends StoredProcedure {
	private static final String procName = "pos_onus_cycle1";

	pos_onus_cycle1(JdbcTemplate JdbcTemplate) {
		super(JdbcTemplate, procName);
		setFunction(false);
		
		
		declareParameter(new SqlParameter("category_name",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("date_val",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("rec_set_id",OracleTypes.VARCHAR));
		declareParameter(new SqlOutParameter("msg1", OracleTypes.VARCHAR));
		
		compile();
	}
}
private class pos_onus_cycle2 extends StoredProcedure {
	private static final String procName = "pos_onus_cycle2";

	pos_onus_cycle2(JdbcTemplate JdbcTemplate) {
		super(JdbcTemplate, procName);
		setFunction(false);
		
		
		declareParameter(new SqlParameter("category_name",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("date_val",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("rec_set_id",OracleTypes.VARCHAR));
		declareParameter(new SqlOutParameter("msg1", OracleTypes.VARCHAR));
		
		compile();
	}
}
private class pos_onus_cycle3 extends StoredProcedure {
	private static final String procName = "pos_onus_cycle3";

	pos_onus_cycle3(JdbcTemplate JdbcTemplate) {
		super(JdbcTemplate, procName);
		setFunction(false);
		
		
		declareParameter(new SqlParameter("category_name",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("date_val",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("rec_set_id",OracleTypes.VARCHAR));
		declareParameter(new SqlOutParameter("msg1", OracleTypes.VARCHAR));
		
		compile();
	}
}
private class onus_pos_settlmnt extends StoredProcedure {
	private static final String procName = "onus_pos_settlmnt";

	onus_pos_settlmnt(JdbcTemplate JdbcTemplate) {
		super(JdbcTemplate, procName);
		setFunction(false);
		
		
		declareParameter(new SqlParameter("category_name",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("date_val",OracleTypes.VARCHAR));
		//declareParameter(new SqlParameter("rec_set_id",OracleTypes.VARCHAR));
		declareParameter(new SqlOutParameter("msg1", OracleTypes.VARCHAR));
		
		compile();
	}
}
private class MasterCard_proc_CD extends StoredProcedure {
	private static final String procName = "recon_cbs_ttum_c_d";

	MasterCard_proc_CD(JdbcTemplate JdbcTemplate) {
		super(JdbcTemplate, procName);
		setFunction(false);
		
		
		declareParameter(new SqlParameter("category_name",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("date_val",OracleTypes.VARCHAR));
		declareParameter(new SqlOutParameter("msg1", OracleTypes.VARCHAR));
		
		compile();
	}
}

private class CardtoCard_set extends StoredProcedure {
	private static final String procName = "card2_settlement";

	CardtoCard_set(JdbcTemplate JdbcTemplate) {
		super(JdbcTemplate, procName);
		setFunction(false);
		
		
		declareParameter(new SqlParameter("category_name",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("date_val",OracleTypes.VARCHAR));
		declareParameter(new SqlOutParameter("msg1", OracleTypes.VARCHAR));
		
		compile();
	}
}

private class MasterCard_proc_Acq extends StoredProcedure {
	private static final String procName = "a_recon_switch_cbs";

	MasterCard_proc_Acq(JdbcTemplate JdbcTemplate) {
		super(JdbcTemplate, procName);
		setFunction(false);
		
		
		declareParameter(new SqlParameter("category_name",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("date_val",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("rec_set_id",OracleTypes.VARCHAR));
		declareParameter(new SqlOutParameter("msg1", OracleTypes.VARCHAR));
		
		compile();
	}
}

private class MasterCard_proc_Acq2 extends StoredProcedure {
	private static final String procName = "a_recon_switch_mastercrd";

	MasterCard_proc_Acq2(JdbcTemplate JdbcTemplate) {
		super(JdbcTemplate, procName);
		setFunction(false);
		
		
		declareParameter(new SqlParameter("category_name",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("date_val",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("rec_set_id",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("dollar_val",OracleTypes.VARCHAR));
		declareParameter(new SqlOutParameter("msg1", OracleTypes.VARCHAR));
		
		compile();
	}
}

private class MasterCard_recon_sett_pro extends StoredProcedure {
	private static final String procName = "recon_settlement_iss";

	MasterCard_recon_sett_pro(JdbcTemplate JdbcTemplate) {
		super(JdbcTemplate, procName);
		setFunction(false);
		
		
		declareParameter(new SqlParameter("category_name",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("date_val",OracleTypes.VARCHAR));
		declareParameter(new SqlOutParameter("msg1", OracleTypes.VARCHAR));
		
		compile();
	}
}

private class MasterCard_recon_sett_pro1 extends StoredProcedure {
	private static final String procName = "recon_settlement_acq";

	MasterCard_recon_sett_pro1(JdbcTemplate JdbcTemplate) {
		super(JdbcTemplate, procName);
		setFunction(false);
		
		
		declareParameter(new SqlParameter("category_name",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("date_val",OracleTypes.VARCHAR));
		declareParameter(new SqlOutParameter("msg1", OracleTypes.VARCHAR));
		
		compile();
	}
}

//call auto-rev

private class MasterCard_proc_Acq_auto_rev extends StoredProcedure {
	private static final String procName = "move_acq_temp";

	MasterCard_proc_Acq_auto_rev(JdbcTemplate JdbcTemplate) {
		super(JdbcTemplate, procName);
		setFunction(false);
		
		
		declareParameter(new SqlParameter("category_name",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("date_val",OracleTypes.VARCHAR));
		declareParameter(new SqlOutParameter("msg1", OracleTypes.VARCHAR));
		
		compile();
	}
}

private class MasterCard_proc_Iss_auto_rev extends StoredProcedure {
	private static final String procName = "move_iss_temp";

	MasterCard_proc_Iss_auto_rev(JdbcTemplate JdbcTemplate) {
		super(JdbcTemplate, procName);
		setFunction(false);
		
		
		declareParameter(new SqlParameter("category_name",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("date_val",OracleTypes.VARCHAR));
		declareParameter(new SqlOutParameter("msg1", OracleTypes.VARCHAR));
		
		compile();
	}
}

// man_file_process

private class MasterCard_proc_man_file extends StoredProcedure {
	private static final String procName = "manual_knockoff";

	MasterCard_proc_man_file(JdbcTemplate JdbcTemplate) {
		super(JdbcTemplate, procName);
		setFunction(false);
		
		
		declareParameter(new SqlParameter("category_name",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("date_val",OracleTypes.VARCHAR));
		declareParameter(new SqlOutParameter("msg1", OracleTypes.VARCHAR));
		
		compile();
	}
}

private class MasterCard_proc_man_file1 extends StoredProcedure {
	private static final String procName = "manual_knockoff_iss";

	MasterCard_proc_man_file1(JdbcTemplate JdbcTemplate) {
		super(JdbcTemplate, procName);
		setFunction(false);
		
		
		declareParameter(new SqlParameter("category_name",OracleTypes.VARCHAR));
		declareParameter(new SqlParameter("date_val",OracleTypes.VARCHAR));
		declareParameter(new SqlOutParameter("msg1", OracleTypes.VARCHAR));
		
		compile();
	}
}

// END
public void clearTables(List<String> tables,CompareBean compareBeanObj)throws Exception
	{
	logger.info("***** ReconProcessDaoImpl.clearTables Start ****");
		try
		{
			for(int i = 0 ;i<tables.size();i++)
			{
				String TRUNCATE_QUERY = "TRUNCATE TABLE "+compareBeanObj.getStMergeCategory()+"_"+tables.get(i);
				logger.info("TRUNCATE QUERY IS "+TRUNCATE_QUERY);
				getJdbcTemplate().execute(TRUNCATE_QUERY);
				TRUNCATE_QUERY = "TRUNCATE TABLE "+compareBeanObj.getStMergeCategory()+"_"+tables.get(i)+"_KNOCKOFF";
				logger.info("TRUNCATE QUERY IS "+TRUNCATE_QUERY);
				getJdbcTemplate().execute(TRUNCATE_QUERY);
				TRUNCATE_QUERY = "TRUNCATE TABLE "+compareBeanObj.getStMergeCategory()+"_"+tables.get(i)+"_MATCHED";
				logger.info("TRUNCATE QUERY IS "+TRUNCATE_QUERY);
				getJdbcTemplate().execute(TRUNCATE_QUERY);
				TRUNCATE_QUERY = "TRUNCATE TABLE TEMP_"+compareBeanObj.getStMergeCategory()+"_"+tables.get(i);
				logger.info("TRUNCATE QUERY IS "+TRUNCATE_QUERY);
				getJdbcTemplate().execute(TRUNCATE_QUERY);
				TRUNCATE_QUERY = "TRUNCATE TABLE RECON_"+compareBeanObj.getStMergeCategory()+"_"+tables.get(i);
				logger.info("TRUNCATE QUERY IS "+TRUNCATE_QUERY);
				getJdbcTemplate().execute(TRUNCATE_QUERY);
				
				
			}
			logger.info("***** ReconProcessDaoImpl.clearTables End ****");
		}
		catch(Exception e)
		{
			demo.logSQLException(e, "ReconProcessDaoImpl.clearTables");
			logger.error(" error in  ReconProcessDaoImpl.clearTables", new Exception(" ReconProcessDaoImpl.clearTables",e));
			throw e;
		}
	}
	
	//Nfs Issuer Process
			public boolean ISSClassifydata(String category,String subCat,String filedate,String entry_by) throws ParseException, Exception {
				try {
					logger.info("***** ReconProcessDaoImpl.ISSClassifydata Start ****");
					
					String response = null;
					Map<String, Object> inParams = new HashMap<String, Object>();

					inParams.put("I_CATEGORY", category);
					inParams.put("I_SUBCATEGORY",subCat );
					inParams.put("I_FILE_DATE",filedate);
					inParams.put("I_ENTRY_BY", entry_by);
					
					
					IssClassificaton acqclassificaton = new IssClassificaton(getJdbcTemplate());
					Map<String, Object> outParams = acqclassificaton.execute(inParams);

					//logger.info("outParams msg1"+outParams.get("msg1"));
					logger.info("***** ReconProcessDaoImpl.ISSClassifydata End ****");
					
					if (outParams.get("ERROR_MESSAGE") != null) {
					

								return false;
							}else {
								
								return true;
							}
						

					
					
				} catch (Exception e) {
					demo.logSQLException(e, "ReconProcessDaoImpl.ISSClassifydata");
					logger.error(" error in  ReconProcessDaoImpl.ISSClassifydata", new Exception(" ReconProcessDaoImpl.ISSClassifydata",e));
					return false;
				}
				
			}
			
			class IssClassificaton extends StoredProcedure {
				private static final String procName = "NFS_Iss_classify";

				IssClassificaton(JdbcTemplate JdbcTemplate) {
					super(JdbcTemplate, procName);
					setFunction(false);
					
					
					declareParameter(new SqlParameter("I_FILE_DATE",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_CATEGORY",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_SUBCATEGORY",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_ENTRY_BY",	OracleTypes.VARCHAR));
					declareParameter(new SqlOutParameter("ERROR_CODE", OracleTypes.VARCHAR));
					declareParameter(new SqlOutParameter("ERROR_MESSAGE", OracleTypes.VARCHAR));
					compile();
				}
			}
			

			public boolean ISSComparedata(String category,String subCat,String filedate,String entry_by) throws ParseException, Exception {
				try {
					logger.info("***** ReconProcessDaoImpl.ISSComparedata Start ****");
					String response = null;
					Map<String, Object> inParams = new HashMap<String, Object>();

					inParams.put("I_CATEGORY", category);
					inParams.put("I_SUBCATEGORY",subCat );
					inParams.put("I_FILE_DATE",filedate);
					inParams.put("I_ENTRY_BY", entry_by);
					
					
					IssCompare issCompare = new IssCompare(getJdbcTemplate());
					Map<String, Object> outParams = issCompare.execute(inParams);

					//logger.info("outParams msg1"+outParams.get("msg1"));
					logger.info("***** ReconProcessDaoImpl.ISSComparedata End ****");
					
					if (outParams.get("ERROR_MESSAGE") != null) {
					

								return false;
							}else {
								
								return true;
							}
						

					
					
				} catch (Exception e) {
					demo.logSQLException(e, "ReconProcessDaoImpl.ISSComparedata");
					logger.error(" error in  ReconProcessDaoImpl.ISSComparedata", new Exception(" ReconProcessDaoImpl.ISSComparedata",e));
					return false;
				}
				
			}
			
			class IssCompare extends StoredProcedure {
				private static final String procName = "NFS_Iss_COMPARE_Proc";

				IssCompare(JdbcTemplate JdbcTemplate) {
					super(JdbcTemplate, procName);
					setFunction(false);
					
					
					declareParameter(new SqlParameter("I_FILE_DATE",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_CATEGORY",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_SUBCATEGORY",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_ENTRY_BY",	OracleTypes.VARCHAR));
					declareParameter(new SqlOutParameter("ERROR_CODE", OracleTypes.VARCHAR));
					declareParameter(new SqlOutParameter("ERROR_MESSAGE", OracleTypes.VARCHAR));
					compile();
				}
			}
			
			
			
			//Nfs Acquirer Process
			
			public boolean AcqClassifydata(String category,String subCat,String filedate,String entry_by) throws ParseException, Exception {
				try {
					logger.info("***** ReconProcessDaoImpl.AcqClassifydata Start ****");
					String response = null;
					Map<String, Object> inParams = new HashMap<String, Object>();

					inParams.put("I_CATEGORY", category);
					inParams.put("I_SUBCATEGORY",subCat );
					inParams.put("I_FILE_DATE",filedate);
					inParams.put("I_ENTRY_BY", entry_by);
					
					
					AcqClassificaton acqclassificaton = new AcqClassificaton(getJdbcTemplate());
					Map<String, Object> outParams = acqclassificaton.execute(inParams);

					logger.info("***** ReconProcessDaoImpl.AcqClassifydata End ****");
					
					if (outParams.get("ERROR_MESSAGE") != null) {
					

								return false;
					}else{
						
						return true;
					}
						

					
					
				} catch (Exception e) {
					demo.logSQLException(e, "ReconProcessDaoImpl.AcqClassifydata");
					logger.error(" error in  ReconProcessDaoImpl.AcqClassifydata", new Exception(" ReconProcessDaoImpl.AcqClassifydata",e));
					return false;
				}
				
			}
			
			class AcqClassificaton extends StoredProcedure {
				private static final String procName = "NFS_ACQ_Classify_Process";

				AcqClassificaton(JdbcTemplate JdbcTemplate) {
					super(JdbcTemplate, procName);
					setFunction(false);
					
					
					declareParameter(new SqlParameter("I_FILE_DATE",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_CATEGORY",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_SUBCATEGORY",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_ENTRY_BY",	OracleTypes.VARCHAR));
					declareParameter(new SqlOutParameter("ERROR_CODE", OracleTypes.VARCHAR));
					declareParameter(new SqlOutParameter("ERROR_MESSAGE", OracleTypes.VARCHAR));
					compile();
				}
			}

			public boolean AcqComparedata(String category,String subCat,String filedate,String entry_by) throws ParseException, Exception {
				try {
					logger.info("***** ReconProcessDaoImpl.AcqComparedata Start ****");
					String response = null;
					Map<String, Object> inParams = new HashMap<String, Object>();

					inParams.put("I_CATEGORY", category);
					inParams.put("I_SUBCATEGORY",subCat );
					inParams.put("I_FILE_DATE",filedate);
					inParams.put("I_ENTRY_BY", entry_by);
					
					
					AcqCompare acqComparedata = new AcqCompare(getJdbcTemplate());
					Map<String, Object> outParams = acqComparedata.execute(inParams);

					logger.info("***** ReconProcessDaoImpl.AcqComparedata End ****");
					
					if (outParams.get("ERROR_MESSAGE") != null) {
					

								return false;
					}else{
						
						return true;
					}
						

					
					
				} catch (Exception e) {
					demo.logSQLException(e, "ReconProcessDaoImpl.AcqComparedata");
					logger.error(" error in  ReconProcessDaoImpl.AcqComparedata", new Exception(" ReconProcessDaoImpl.AcqComparedata",e));
					return false;
				}
				
			}
			
			class AcqCompare extends StoredProcedure {
				private static final String procName = "NFS__ACQ_COMPARE_Proc";

				AcqCompare(JdbcTemplate JdbcTemplate) {
					super(JdbcTemplate, procName);
					setFunction(false);
					
					
					declareParameter(new SqlParameter("I_FILE_DATE",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_CATEGORY",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_SUBCATEGORY",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_ENTRY_BY",	OracleTypes.VARCHAR));
					declareParameter(new SqlOutParameter("ERROR_CODE", OracleTypes.VARCHAR));
					declareParameter(new SqlOutParameter("ERROR_MESSAGE", OracleTypes.VARCHAR));
					compile();
				}
			}
			
//CASHNET Issuer Process
			
			public boolean cashnetISSClassifydata(String category,String subCat,String filedate,String entry_by) throws ParseException, Exception {
				try {
					logger.info("***** ReconProcessDaoImpl.cashnetISSClassifydata Start ****");
					String response = null;
					Map<String, Object> inParams = new HashMap<String, Object>();

					inParams.put("I_CATEGORY", category);
					inParams.put("I_SUBCATEGORY",subCat );
					inParams.put("I_FILE_DATE",filedate);
					inParams.put("I_ENTRY_BY", entry_by);
					
					
					cashnetIssClassificaton acqclassificaton = new cashnetIssClassificaton(getJdbcTemplate());
					Map<String, Object> outParams = acqclassificaton.execute(inParams);
					logger.info("***** ReconProcessDaoImpl.cashnetISSClassifydata End ****");
					if (outParams.get("ERROR_MESSAGE") != null) {
					

								return false;
							}else {
								
								return true;
							}
						

					
					
				} catch (Exception e) {
					demo.logSQLException(e, "ReconProcessDaoImpl.cashnetISSClassifydata");
					logger.error(" error in  ReconProcessDaoImpl.cashnetISSClassifydata", new Exception(" ReconProcessDaoImpl.cashnetISSClassifydata",e));
					return false;
				}
				
			}
			
			class cashnetIssClassificaton extends StoredProcedure {
				private static final String procName = "CASHNET_ISS_CLASSIFY";

				cashnetIssClassificaton(JdbcTemplate JdbcTemplate) {
					super(JdbcTemplate, procName);
					setFunction(false);
					
					
					declareParameter(new SqlParameter("I_FILE_DATE",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_CATEGORY",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_SUBCATEGORY",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_ENTRY_BY",	OracleTypes.VARCHAR));
					declareParameter(new SqlOutParameter("ERROR_CODE", OracleTypes.VARCHAR));
					declareParameter(new SqlOutParameter("ERROR_MESSAGE", OracleTypes.VARCHAR));
					compile();
				}
			}
			

			public boolean cashnetISSComparedata(String category,String subCat,String filedate,String entry_by) throws ParseException, Exception {
				try {
					logger.info("***** ReconProcessDaoImpl.cashnetISSComparedata Start ****");
					String response = null;
					Map<String, Object> inParams = new HashMap<String, Object>();

					inParams.put("I_CATEGORY", category);
					inParams.put("I_SUBCATEGORY",subCat );
					inParams.put("I_FILE_DATE",filedate);
					inParams.put("I_ENTRY_BY", entry_by);
					
					
					cashnetIssCompare issCompare = new cashnetIssCompare(getJdbcTemplate());
					Map<String, Object> outParams = issCompare.execute(inParams);
					logger.info("***** ReconProcessDaoImpl.cashnetISSComparedata End ****");
					if (outParams.get("ERROR_MESSAGE") != null) {
					

								return false;
							}else {
								
								return true;
							}
						

					
					
				} catch (Exception e) {
					demo.logSQLException(e, "ReconProcessDaoImpl.cashnetISSComparedata");
					logger.error(" error in  ReconProcessDaoImpl.cashnetISSComparedata", new Exception(" ReconProcessDaoImpl.cashnetISSComparedata",e));
					return false;
				}
				
			}
			
			class cashnetIssCompare extends StoredProcedure {
				private static final String procName = "CASHNET_ISS_COMPARE_PROC";

				cashnetIssCompare(JdbcTemplate JdbcTemplate) {
					super(JdbcTemplate, procName);
					setFunction(false);
					
					
					declareParameter(new SqlParameter("I_FILE_DATE",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_CATEGORY",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_SUBCATEGORY",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_ENTRY_BY",	OracleTypes.VARCHAR));
					declareParameter(new SqlOutParameter("ERROR_CODE", OracleTypes.VARCHAR));
					declareParameter(new SqlOutParameter("ERROR_MESSAGE", OracleTypes.VARCHAR));
					compile();
				}
			}
			
			
			
			//cashnet Acquirer Process
			
			public boolean cashnetAcqClassifydata(String category,String subCat,String filedate,String entry_by) throws ParseException, Exception {
				try {
					logger.info("***** ReconProcessDaoImpl.cashnetAcqClassifydata Start ****");
					String response = null;
					Map<String, Object> inParams = new HashMap<String, Object>();

					inParams.put("I_CATEGORY", category);
					inParams.put("I_SUBCATEGORY",subCat );
					inParams.put("I_FILE_DATE",filedate);
					inParams.put("I_ENTRY_BY", entry_by);
					
					
					
					cashnetAcqClassificaton acqclassificaton = new cashnetAcqClassificaton(getJdbcTemplate());
					Map<String, Object> outParams = acqclassificaton.execute(inParams);
					logger.info("***** ReconProcessDaoImpl.cashnetAcqClassifydata End ****");
					if (outParams.get("ERROR_MESSAGE") != null) {
					

								return false;
					}else{
						
						return true;
					}
						

					
					
				} catch (Exception e) {
					demo.logSQLException(e, "ReconProcessDaoImpl.cashnetAcqClassifydata");
					logger.error(" error in  ReconProcessDaoImpl.cashnetAcqClassifydata", new Exception(" ReconProcessDaoImpl.cashnetAcqClassifydata",e));
					return false;
				}
				
			}
			
			class cashnetAcqClassificaton extends StoredProcedure {
				private static final String procName = "CASHNET_ACQ_Classify";

				cashnetAcqClassificaton(JdbcTemplate JdbcTemplate) {
					super(JdbcTemplate, procName);
					setFunction(false);
					
					
					declareParameter(new SqlParameter("I_FILE_DATE",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_CATEGORY",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_SUBCATEGORY",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_ENTRY_BY",	OracleTypes.VARCHAR));
					declareParameter(new SqlOutParameter("ERROR_CODE", OracleTypes.VARCHAR));
					declareParameter(new SqlOutParameter("ERROR_MESSAGE", OracleTypes.VARCHAR));
					compile();
				}
			}

			public boolean cashnetAcqComparedata(String category,String subCat,String filedate,String entry_by) throws ParseException, Exception {
				try {
					logger.info("***** ReconProcessDaoImpl.cashnetAcqComparedata Start ****");
					String response = null;
					Map<String, Object> inParams = new HashMap<String, Object>();

					inParams.put("I_CATEGORY", category);
					inParams.put("I_SUBCATEGORY",subCat );
					inParams.put("I_FILE_DATE",filedate);
					inParams.put("I_ENTRY_BY", entry_by);
					
					
					cashnetAcqCompare acqComparedata = new cashnetAcqCompare(getJdbcTemplate());
					Map<String, Object> outParams = acqComparedata.execute(inParams);
					logger.info("***** ReconProcessDaoImpl.cashnetAcqComparedata End ****");
					if (outParams.get("ERROR_MESSAGE") != null) {
					

								return false;
					}else{
						
						return true;
					}
						

					
					
				} catch (Exception e) {
					demo.logSQLException(e, "ReconProcessDaoImpl.cashnetAcqComparedata");
					logger.error(" error in  ReconProcessDaoImpl.cashnetAcqComparedata", new Exception(" ReconProcessDaoImpl.cashnetAcqComparedata",e));
					return false;
				}
				
			}
			
			class cashnetAcqCompare extends StoredProcedure {
				private static final String procName = "CASHNET_ACQ_COMPARE_PROC";

				cashnetAcqCompare(JdbcTemplate JdbcTemplate) {
					super(JdbcTemplate, procName);
					setFunction(false);
					
					
					declareParameter(new SqlParameter("I_FILE_DATE",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_CATEGORY",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_SUBCATEGORY",OracleTypes.VARCHAR));
					declareParameter(new SqlParameter("I_ENTRY_BY",	OracleTypes.VARCHAR));
					declareParameter(new SqlOutParameter("ERROR_CODE", OracleTypes.VARCHAR));
					declareParameter(new SqlOutParameter("ERROR_MESSAGE", OracleTypes.VARCHAR));
					compile();
				}
			}


		
	
	

}
